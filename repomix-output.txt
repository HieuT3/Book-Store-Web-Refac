This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-25T08:46:24.034Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.dockerignore
.gitattributes
.gitignore
.mvn/wrapper/maven-wrapper.properties
compose.yaml
Dockerfile
mvnw
mvnw.cmd
pom.xml
README.Docker.md
src/main/java/com/bookstore/app/BookStoreWebsiteApplication.java
src/main/java/com/bookstore/app/bootstrap/AdminAndRoleSeeder.java
src/main/java/com/bookstore/app/config/AsyncConfig.java
src/main/java/com/bookstore/app/config/CacheConfig.java
src/main/java/com/bookstore/app/config/CloudinaryConfig.java
src/main/java/com/bookstore/app/config/CorsConfig.java
src/main/java/com/bookstore/app/config/DotEnvConfig.java
src/main/java/com/bookstore/app/config/JavaMailSender.java
src/main/java/com/bookstore/app/config/ModelMapperConfig.java
src/main/java/com/bookstore/app/config/RedisConfig.java
src/main/java/com/bookstore/app/config/SecurityConfig.java
src/main/java/com/bookstore/app/config/WebSocketConfig.java
src/main/java/com/bookstore/app/constant/OrderStatusType.java
src/main/java/com/bookstore/app/constant/RoleType.java
src/main/java/com/bookstore/app/controller/AuthController.java
src/main/java/com/bookstore/app/controller/AuthorController.java
src/main/java/com/bookstore/app/controller/BookController.java
src/main/java/com/bookstore/app/controller/BookDocumentController.java
src/main/java/com/bookstore/app/controller/CacheController.java
src/main/java/com/bookstore/app/controller/CartController.java
src/main/java/com/bookstore/app/controller/CategoryController.java
src/main/java/com/bookstore/app/controller/CloudinaryController.java
src/main/java/com/bookstore/app/controller/NotificationController.java
src/main/java/com/bookstore/app/controller/OrderController.java
src/main/java/com/bookstore/app/controller/OrderDetailController.java
src/main/java/com/bookstore/app/controller/PasswordResetTokenController.java
src/main/java/com/bookstore/app/controller/RegistrationController.java
src/main/java/com/bookstore/app/controller/RoleController.java
src/main/java/com/bookstore/app/controller/SearchController.java
src/main/java/com/bookstore/app/controller/UserController.java
src/main/java/com/bookstore/app/controller/VerificationTokenController.java
src/main/java/com/bookstore/app/controller/WebSocketController.java
src/main/java/com/bookstore/app/dto/request/AuthorRequest.java
src/main/java/com/bookstore/app/dto/request/BookRequest.java
src/main/java/com/bookstore/app/dto/request/CartRequest.java
src/main/java/com/bookstore/app/dto/request/CategoryRequest.java
src/main/java/com/bookstore/app/dto/request/LoginRequest.java
src/main/java/com/bookstore/app/dto/request/RegisterRequest.java
src/main/java/com/bookstore/app/dto/request/ResetPasswordRequest.java
src/main/java/com/bookstore/app/dto/request/RoleRequest.java
src/main/java/com/bookstore/app/dto/request/UserRequest.java
src/main/java/com/bookstore/app/dto/response/ApiResponse.java
src/main/java/com/bookstore/app/dto/response/AuthorResponse.java
src/main/java/com/bookstore/app/dto/response/BookResponse.java
src/main/java/com/bookstore/app/dto/response/CategoryResponse.java
src/main/java/com/bookstore/app/dto/response/JwtTokenResponse.java
src/main/java/com/bookstore/app/dto/response/NotificationMessage.java
src/main/java/com/bookstore/app/dto/response/OrderDetailResponse.java
src/main/java/com/bookstore/app/dto/response/OrderResponse.java
src/main/java/com/bookstore/app/dto/response/PageResponse.java
src/main/java/com/bookstore/app/dto/response/RoleResponse.java
src/main/java/com/bookstore/app/dto/response/UserProfileResponse.java
src/main/java/com/bookstore/app/dto/response/UserResponse.java
src/main/java/com/bookstore/app/elasticsearch/BookDocument.java
src/main/java/com/bookstore/app/elasticsearch/BookDocumentRepository.java
src/main/java/com/bookstore/app/entity/Author.java
src/main/java/com/bookstore/app/entity/Book.java
src/main/java/com/bookstore/app/entity/Category.java
src/main/java/com/bookstore/app/entity/Order.java
src/main/java/com/bookstore/app/entity/OrderDetail.java
src/main/java/com/bookstore/app/entity/PasswordResetToken.java
src/main/java/com/bookstore/app/entity/Role.java
src/main/java/com/bookstore/app/entity/User.java
src/main/java/com/bookstore/app/entity/VerificationToken.java
src/main/java/com/bookstore/app/event/OnRegistrationCompleteEvent.java
src/main/java/com/bookstore/app/event/OnResetPasswordEvent.java
src/main/java/com/bookstore/app/event/RegistrationCompleteListener.java
src/main/java/com/bookstore/app/event/ResetPasswordListener.java
src/main/java/com/bookstore/app/exception/BadCredentialsException.java
src/main/java/com/bookstore/app/exception/GlobalExceptionHandler.java
src/main/java/com/bookstore/app/exception/JwtAccessDeniedHandler.java
src/main/java/com/bookstore/app/exception/JwtAuthenticationEntryPoint.java
src/main/java/com/bookstore/app/exception/ResourceAlreadyExistsException.java
src/main/java/com/bookstore/app/exception/ResourceNotFoundException.java
src/main/java/com/bookstore/app/exception/TokenExpiredException.java
src/main/java/com/bookstore/app/exception/UserNotActiveException.java
src/main/java/com/bookstore/app/filter/JwtAuthenticationFilter.java
src/main/java/com/bookstore/app/repository/AuthorRepository.java
src/main/java/com/bookstore/app/repository/BookRepository.java
src/main/java/com/bookstore/app/repository/CategoryRepository.java
src/main/java/com/bookstore/app/repository/OrderDetailRepository.java
src/main/java/com/bookstore/app/repository/OrderRepository.java
src/main/java/com/bookstore/app/repository/PasswordResetTokenRepository.java
src/main/java/com/bookstore/app/repository/RoleRepository.java
src/main/java/com/bookstore/app/repository/UserRepository.java
src/main/java/com/bookstore/app/repository/VerificationTokenRepository.java
src/main/java/com/bookstore/app/security/CustomerUserDetails.java
src/main/java/com/bookstore/app/security/CustomUserDetailsService.java
src/main/java/com/bookstore/app/security/JwtAuthenticationProvider.java
src/main/java/com/bookstore/app/service/AuthorService.java
src/main/java/com/bookstore/app/service/AuthService.java
src/main/java/com/bookstore/app/service/BookDocumentService.java
src/main/java/com/bookstore/app/service/BookService.java
src/main/java/com/bookstore/app/service/CacheService.java
src/main/java/com/bookstore/app/service/CartService.java
src/main/java/com/bookstore/app/service/CategoryService.java
src/main/java/com/bookstore/app/service/CloudinaryService.java
src/main/java/com/bookstore/app/service/impl/AuthorServiceImpl.java
src/main/java/com/bookstore/app/service/impl/AuthServiceImpl.java
src/main/java/com/bookstore/app/service/impl/BookDocumentServiceImpl.java
src/main/java/com/bookstore/app/service/impl/BookServiceImpl.java
src/main/java/com/bookstore/app/service/impl/CacheServiceImpl.java
src/main/java/com/bookstore/app/service/impl/CartServiceImpl.java
src/main/java/com/bookstore/app/service/impl/CategoryServiceImpl.java
src/main/java/com/bookstore/app/service/impl/CloudinaryServiceImpl.java
src/main/java/com/bookstore/app/service/impl/MailServiceImpl.java
src/main/java/com/bookstore/app/service/impl/NotificationServiceImpl.java
src/main/java/com/bookstore/app/service/impl/OrderDetailServiceImpl.java
src/main/java/com/bookstore/app/service/impl/OrderServiceImpl.java
src/main/java/com/bookstore/app/service/impl/PasswordResetTokenServiceImpl.java
src/main/java/com/bookstore/app/service/impl/RegistrationServiceImpl.java
src/main/java/com/bookstore/app/service/impl/RoleServiceImpl.java
src/main/java/com/bookstore/app/service/impl/SearchServiceImpl.java
src/main/java/com/bookstore/app/service/impl/UserServiceImpl.java
src/main/java/com/bookstore/app/service/impl/VerificationTokenServiceImpl.java
src/main/java/com/bookstore/app/service/MailService.java
src/main/java/com/bookstore/app/service/NotificationService.java
src/main/java/com/bookstore/app/service/OrderDetailService.java
src/main/java/com/bookstore/app/service/OrderService.java
src/main/java/com/bookstore/app/service/PasswordResetTokenService.java
src/main/java/com/bookstore/app/service/RegistrationService.java
src/main/java/com/bookstore/app/service/RoleService.java
src/main/java/com/bookstore/app/service/SearchService.java
src/main/java/com/bookstore/app/service/UserService.java
src/main/java/com/bookstore/app/service/VerificationTokenService.java
src/main/java/com/bookstore/app/utils/BookMapper.java
src/main/java/com/bookstore/app/utils/CartItems.java
src/main/resources/application.properties
src/main/resources/application.yaml
src/main/resources/rebel.xml
src/test/java/com/bookstore/app/BookStoreWebsiteApplicationTests.java

================================================================
Repository Files
================================================================

================
File: .dockerignore
================
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/go/build-context-dockerignore/

**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/target
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/vendor
LICENSE
README.md

================
File: .gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: .gitignore
================
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

.env
error.txt

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip

================
File: compose.yaml
================
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - "8080:8080"

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must createBook `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

================
File: Dockerfile
================
# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

################################################################################

# Create a stage for resolving and downloading dependencies.
FROM eclipse-temurin:17-jdk-jammy as deps

WORKDIR /build

# Copy the mvnw wrapper with executable permissions.
COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.m2 so that subsequent builds don't have to
# re-download packages.
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests

################################################################################

# Create a stage for building the application based on the stage with downloaded dependencies.
# This Dockerfile is optimized for Java applications that output an uber jar, which includes
# all the dependencies needed to run your app inside a JVM. If your app doesn't output an uber
# jar and instead relies on an application server like Apache Tomcat, you'll need to updateBook this
# stage with the correct filename of your package and updateBook the base image of the "final" stage
# use the relevant app server, e.g., using tomcat (https://hub.docker.com/_/tomcat/) as a base image.
FROM deps as package

WORKDIR /build

COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

################################################################################

# Create a stage for extracting the application into separate layers.
# Take advantage of Spring Boot's layer tools and Docker's caching by extracting
# the packaged application into separate layers that can be copied into the final stage.
# See Spring's docs for reference:
# https://docs.spring.io/spring-boot/docs/current/reference/html/container-images.html
FROM package as extract

WORKDIR /build

RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

################################################################################

# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the install or build stage where the necessary files are copied
# from the install stage.
#
# The example below uses eclipse-turmin's JRE image as the foundation for running the app.
# By specifying the "17-jre-jammy" tag, it will also use whatever happens to be the
# most recent version of that tag when you build your Dockerfile.
# If reproducability is important, consider using a specific digest SHA, like
# eclipse-temurin@sha256:99cede493dfd88720b610eb8077c8688d3cca50003d76d1d539b0efc8cca72b4.
FROM eclipse-temurin:17-jre-jammy AS final

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-createBook-home \
    --uid "${UID}" \
    appuser
USER appuser

# Copy the executable from the "package" stage.
COPY --from=extract build/target/extracted/dependencies/ ./
COPY --from=extract build/target/extracted/spring-boot-loader/ ./
COPY --from=extract build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract build/target/extracted/application/ ./

EXPOSE 8080

ENTRYPOINT [ "java", "org.springframework.boot.loader.launch.JarLauncher" ]

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.8</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.bookstore</groupId>
	<artifactId>Book-Store-Website</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Book-Store-Website</name>
	<description>Book Store Website using Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>com.github.ben-manes.caffeine</groupId>-->
<!--			<artifactId>caffeine</artifactId>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<dependency>
			<groupId>com.cloudinary</groupId>
			<artifactId>cloudinary-http5</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>com.cloudinary</groupId>
			<artifactId>cloudinary-taglib</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>io.github.cdimascio</groupId>
			<artifactId>dotenv-java</artifactId>
			<version>2.2.4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

================
File: README.Docker.md
================
### Building and running your application

When you're ready, start your application by running:
`docker compose up --build`.

Your application will be available at http://localhost:8080.

### Deploying your application to the cloud

First, build your image, e.g.: `docker build -t myapp .`.
If your cloud uses a different CPU architecture than your development
machine (e.g., you are on a Mac M1 and your cloud provider is amd64),
you'll want to build the image for that platform, e.g.:
`docker build --platform=linux/amd64 -t myapp .`.

Then, push it to your registry, e.g. `docker push myregistry.com/myapp`.

Consult Docker's [getting started](https://docs.docker.com/go/get-started-sharing/)
docs for more detail on building and pushing.

================
File: src/main/java/com/bookstore/app/BookStoreWebsiteApplication.java
================
package com.bookstore.app;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.scheduling.annotation.EnableAsync;

@SpringBootApplication
@EnableAsync
@EnableCaching
public class BookStoreWebsiteApplication {

	public static void main(String[] args) {
		SpringApplication.run(BookStoreWebsiteApplication.class, args);
	}

}

================
File: src/main/java/com/bookstore/app/bootstrap/AdminAndRoleSeeder.java
================
package com.bookstore.app.bootstrap;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.entity.Role;
import com.bookstore.app.entity.User;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.RoleRepository;
import com.bookstore.app.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.Set;

@Component
@RequiredArgsConstructor
public class AdminAndRoleSeeder implements ApplicationListener<ContextRefreshedEvent> {

    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Value("${ADMIN_EMAIL}")
    String adminEmail;

    @Value("${ADMIN_PASSWORD}")
    String adminPassword;

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        loadRole();
        loadAdmin();
    }

    private void loadRole() {
        List<RoleType> roleTypes = List.of(RoleType.ADMIN, RoleType.USER);
        Map<RoleType, String> mapDescription = Map.of(
                RoleType.ADMIN, "This role is for admin",
                RoleType.USER, "This role is for user"
        );
        roleTypes.forEach(roleType ->  {
            roleRepository.findByName(roleType).ifPresentOrElse(System.out::println, () -> {
                Role role = new Role();
                role.setName(roleType);
                role.setDescription(mapDescription.get(roleType));
                roleRepository.save(role);
            });
        });
    }

    private void loadAdmin() {
        Role role = roleRepository.findByName(RoleType.ADMIN)
                .orElseThrow(() -> new ResourceNotFoundException("Role with name: " + RoleType.ADMIN.name() + " not found"));
        if(userRepository.findByEmail(adminEmail).isPresent()) return;
        User userAdmin = new User();
        userAdmin.setEmail(adminEmail);
        userAdmin.setFullName("Cao Ba Hieu");
        userAdmin.setPassword(passwordEncoder.encode(adminPassword));
        userAdmin.setPhone("0987183624");
        userAdmin.setAddress("Ha Noi");
        userAdmin.setActive(true);
        userAdmin.setRoles(Set.of(role));

        userRepository.save(userAdmin);
    }
}

================
File: src/main/java/com/bookstore/app/config/AsyncConfig.java
================
package com.bookstore.app.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

@Configuration
public class AsyncConfig {

    @Bean(name = "asyncExecutor")
    public Executor executor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(100);
        return executor;
    }
}

================
File: src/main/java/com/bookstore/app/config/CacheConfig.java
================
//package com.bookstore.app.config;
//
//import com.github.benmanes.caffeine.cache.Caffeine;
//import org.springframework.cache.CacheManager;
//import org.springframework.cache.caffeine.CaffeineCacheManager;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//
//import java.util.concurrent.TimeUnit;
//
//@Configuration
//public class CacheConfig {
//
//    @Bean
//    public Caffeine<Object, Object> caffeineConfig() {
//        return Caffeine.newBuilder()
//                .maximumSize(100)
//                .expireAfterWrite(1, TimeUnit.MINUTES)
//                .recordStats();
//    }
//
//    @Bean
//    public CacheManager cacheManager() {
//        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();
//        caffeineCacheManager.setCaffeine(caffeineConfig());
//        return caffeineCacheManager;
//    }
//}

================
File: src/main/java/com/bookstore/app/config/CloudinaryConfig.java
================
package com.bookstore.app.config;

import com.cloudinary.Cloudinary;
import io.github.cdimascio.dotenv.Dotenv;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class CloudinaryConfig {

    Dotenv dotenv;

    @Bean
    public Cloudinary cloudinary() {
        String url = dotenv.get("CLOUDINARY_URL");
        return new Cloudinary(url);
    }
}

================
File: src/main/java/com/bookstore/app/config/CorsConfig.java
================
package com.bookstore.app.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
public class CorsConfig {

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration corsConfiguration = new CorsConfiguration();
        corsConfiguration.setAllowedHeaders(List.of("*"));
        corsConfiguration.setAllowedMethods(List.of("*"));
        corsConfiguration.setAllowedOrigins(List.of("http://127.0.0.1:5500"));
        corsConfiguration.setAllowCredentials(true);
        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();
        urlBasedCorsConfigurationSource.registerCorsConfiguration("/**", corsConfiguration);
        return urlBasedCorsConfigurationSource;
    }
}

================
File: src/main/java/com/bookstore/app/config/DotEnvConfig.java
================
package com.bookstore.app.config;

import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DotEnvConfig {

    @Bean
    public Dotenv dotenv() {
        return Dotenv.load();
    }
}

================
File: src/main/java/com/bookstore/app/config/JavaMailSender.java
================
package com.bookstore.app.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.MailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;

import java.util.Properties;

@Configuration
public class JavaMailSender {

    @Value("${MAIL_USERNAME}")
    private String username;

    @Value("${MAIL_PASSWORD}")
    private String password;

    @Bean
    public MailSender mailSender() {
        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost("smtp.gmail.com");
        mailSender.setPort(587);
        mailSender.setUsername(username);
        mailSender.setPassword(password);

        Properties properties = mailSender.getJavaMailProperties();
        properties.put("mail.transport.protocol", "smtp");
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.debug", "true");

        return mailSender;
    }
}

================
File: src/main/java/com/bookstore/app/config/ModelMapperConfig.java
================
package com.bookstore.app.config;

import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ModelMapperConfig {

    @Bean
    public ModelMapper modelMapper() {
        return new ModelMapper();
    }
}

================
File: src/main/java/com/bookstore/app/config/RedisConfig.java
================
package com.bookstore.app.config;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.time.Duration;

@Configuration
public class RedisConfig {

    @Bean
    public LettuceConnectionFactory lettuceConnectionFactory() {
        return new LettuceConnectionFactory();
    }

    @Bean
    public RedisTemplate<String, Object> redisTemplate(LettuceConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(connectionFactory);
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        return redisTemplate;
    }

    @Bean
    public CacheManager redisCacheManager(LettuceConnectionFactory connectionFactory) {

        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());
        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        objectMapper.activateDefaultTyping(
                objectMapper.getPolymorphicTypeValidator(),
                ObjectMapper.DefaultTyping.NON_FINAL,
                JsonTypeInfo.As.PROPERTY
        );

        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(60))
                .disableCachingNullValues()
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(
                        new GenericJackson2JsonRedisSerializer(objectMapper)
                        ));

        return RedisCacheManager.builder(connectionFactory)
                .cacheDefaults(config)
                .build();
    }
}

================
File: src/main/java/com/bookstore/app/config/SecurityConfig.java
================
package com.bookstore.app.config;

import com.bookstore.app.filter.JwtAuthenticationFilter;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class SecurityConfig {

    JwtAuthenticationFilter jwtAuthenticationFilter;
    UserDetailsService userDetailsService;
    AuthenticationEntryPoint authenticationEntryPoint;
    AccessDeniedHandler accessDeniedHandler;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(
                        authorize -> authorize
                                .requestMatchers("/api/v1/auth/**").permitAll()
                                .requestMatchers("/api/v1/register/**").permitAll()
                                .requestMatchers(HttpMethod.GET, "/api/v1/author/**").permitAll()
                                .requestMatchers(HttpMethod.GET, "/api/v1/book/**").permitAll()
                                .requestMatchers(HttpMethod.GET, "/api/v1/category/**").permitAll()
                                .requestMatchers(HttpMethod.GET, "/api/v1/user/**").permitAll()
                                .requestMatchers("/api/v1/book-document/").permitAll()
                                .requestMatchers("/error").permitAll()
                                .anyRequest().permitAll()
                )
                .exceptionHandling(ex -> ex
                                .accessDeniedHandler(accessDeniedHandler)
                                .authenticationEntryPoint(authenticationEntryPoint)
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }
}

================
File: src/main/java/com/bookstore/app/config/WebSocketConfig.java
================
package com.bookstore.app.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry) {
        registry.enableSimpleBroker("/topic");
        registry.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws")
                .setAllowedOrigins("http://127.0.0.1:5500")
                .withSockJS();
    }
}

================
File: src/main/java/com/bookstore/app/constant/OrderStatusType.java
================
package com.bookstore.app.constant;

public enum OrderStatusType {
    PENDING,
    CONFIRMED,
    PROCESSING,
    SHIPPING,
    DELIVERED,
    CANCELED,
    RETURNED
}

================
File: src/main/java/com/bookstore/app/constant/RoleType.java
================
package com.bookstore.app.constant;

public enum RoleType {
    ADMIN,
    USER
}

================
File: src/main/java/com/bookstore/app/controller/AuthController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.request.LoginRequest;
import com.bookstore.app.dto.request.ResetPasswordRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.JwtTokenResponse;
import com.bookstore.app.dto.response.UserProfileResponse;
import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.entity.User;
import com.bookstore.app.event.OnResetPasswordEvent;
import com.bookstore.app.service.AuthService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/auth")
@AllArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class AuthController {

    AuthService authService;
    ModelMapper modelMapper;
    ApplicationEventPublisher applicationEventPublisher;

    @PostMapping("/login")
    public ResponseEntity<ApiResponse<JwtTokenResponse>> login(
            @Valid @RequestBody LoginRequest loginRequest
            ) {
        log.info("Login user with email: {}", loginRequest.getEmail());
        return ResponseEntity.ok(
                ApiResponse.<JwtTokenResponse>builder()
                        .success(true)
                        .message("Login successful")
                        .data(authService.login(loginRequest))
                        .build()
        );
    }

    @GetMapping("reset-password")
    public ResponseEntity<ApiResponse<Void>> resetPassword(@RequestParam("email") String email,
                                                           HttpServletRequest request) {
        log.info("Reset password for user with email: {}", email);
        User user = modelMapper.map(authService.resetPassword(email), User.class);
         String appUrl = "http://" + request.getServerName() + ":" + request.getServerPort()
                 + "/api/v1/auth/confirm-reset-password";
         applicationEventPublisher.publishEvent(new OnResetPasswordEvent(user, appUrl));
         return ResponseEntity.ok(
                 ApiResponse.<Void>builder()
                         .success(true)
                         .message("Password reset link sent to your e-mail address. Please check your inbox.")
                         .data(null)
                         .build()
         );
    }

    @GetMapping("confirm-reset-password")
    public ResponseEntity<ApiResponse<Long>> confirmResetPassword(@RequestParam("token") String token) {
        log.info("Confirm reset password with token: {}", token);
        return ResponseEntity.ok(
                ApiResponse.<Long>builder()
                        .success(true)
                        .message("Confirm reset password successful")
                        .data(authService.confirmResetPassword(token))
                        .build()
        );
    }

    @PostMapping("/change-password")
    public ResponseEntity<ApiResponse<UserResponse>> changePassword(
            @Valid @RequestBody ResetPasswordRequest resetPasswordRequest
            ) {
        log.info("Change password for user with id: {}", resetPasswordRequest.getUserId());
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("Change password of user with id: " + resetPasswordRequest.getUserId() + " successfully!")
                        .data(authService.changPassword(resetPasswordRequest))
                        .build()
        );
    }

    @GetMapping("/me")
    public ResponseEntity<ApiResponse<UserProfileResponse>> getMe() {
        log.info("Get me");
        return ResponseEntity.ok(
                ApiResponse.<UserProfileResponse>builder()
                        .success(true)
                        .message("Get me successfully!")
                        .data(authService.getMe())
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/AuthorController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.request.AuthorRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.AuthorResponse;
import com.bookstore.app.service.AuthorService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/author")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class AuthorController {

    AuthorService authorService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<AuthorResponse>>> getAll() {
        log.info("Get all authors");
        return ResponseEntity.ok(
                ApiResponse.<List<AuthorResponse>>builder()
                        .success(true)
                        .message("Get all authors")
                        .data(this.authorService.getAll())
                        .build()
        );
    }

    @GetMapping("{id}")
    public ResponseEntity<ApiResponse<AuthorResponse>> getAuthorById(@PathVariable("id") Long id) {
        log.info("Get author by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<AuthorResponse>builder()
                        .success(true)
                        .message("Get author by id successfully!")
                        .data(authorService.getAuthorById(id))
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<AuthorResponse>> createAuthor(
            @Valid @RequestBody AuthorRequest authorRequest) {
        log.info("Create author: {}", authorRequest);
        return ResponseEntity.ok(
                ApiResponse.<AuthorResponse>builder()
                        .success(true)
                        .message("Author created successfully!")
                        .data(authorService.createAuthor(authorRequest))
                        .build()
        );
    }

    @PutMapping("{id}")
    public ResponseEntity<ApiResponse<AuthorResponse>> updateAuthor(
            @PathVariable("id") Long id,
            @Valid @RequestBody AuthorRequest authorRequest
    ) {
        log.info("Update author by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<AuthorResponse>builder()
                        .success(true)
                        .message("Author updated successfully!")
                        .data(authorService.updateAuthor(id, authorRequest))
                        .build()
        );
    }

    @DeleteMapping("{id}")
    public ResponseEntity<ApiResponse<Void>> deleteAuthorById(@PathVariable("id") Long id) {
        log.info("Delete author by id: {}", id);
        authorService.deleteAuthorById(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Author deleted successfully!")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/BookController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.request.BookRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.BookResponse;
import com.bookstore.app.dto.response.PageResponse;
import com.bookstore.app.service.BookService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/book")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class BookController {

    BookService bookService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<BookResponse>>> getAll() {
        log.info("Get all books");
        return ResponseEntity.ok(
                ApiResponse.<List<BookResponse>>builder()
                        .success(true)
                        .message("Get all books successfully!")
                        .data(bookService.getAll())
                        .build()
        );
    }

    @GetMapping("{id}")
    public ResponseEntity<ApiResponse<BookResponse>> getBookById(@PathVariable("id") Long id) {
        log.info("Get book by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<BookResponse>builder()
                        .success(true)
                        .message("Get book by id: " + id + " successfully!")
                        .data(bookService.getBookById(id))
                        .build()
        );
    }

    @GetMapping("/pagination")
    public ResponseEntity<ApiResponse<PageResponse<BookResponse>>> getBooksPagination(
            @RequestParam("page") int page,
            @RequestParam("limit") int limit
    ) {
        log.info("Get books pagination with page: {} and limit: {}", page, limit);
        return ResponseEntity.ok(
                ApiResponse.<PageResponse<BookResponse>>builder()
                        .success(true)
                        .message("Get books pagination with page: " + page + " and limit: " + limit + " successfully!")
                        .data(bookService.getBooksPagination(page, limit))
                        .build()
        );
    }

    @GetMapping("/category/{id}")
    public ResponseEntity<ApiResponse<List<BookResponse>>> getBooksByCategoryId(@PathVariable("id") Long categoryId) {
        log.info("Get books by category id: {}", categoryId);
        return ResponseEntity.ok(
                ApiResponse.<List<BookResponse>>builder()
                        .success(true)
                        .message("Get books by category id: " + categoryId + " successfully!")
                        .data(bookService.getBooksByCategoryId(categoryId))
                        .build()
        );
    }

    @GetMapping("featured/category/{id}")
    public ResponseEntity<ApiResponse<List<BookResponse>>> getBooksFeaturedByCategoryId(
            @PathVariable("id") Long categoryId,
            @RequestParam("page") int page,
            @RequestParam("limit") int limit
    ) {
        log.info("Get books featured by category id: {}", categoryId);
        return ResponseEntity.ok(
                ApiResponse.<List<BookResponse>>builder()
                        .success(true)
                        .message("Get books featured by category id: " + categoryId + " successfully!")
                        .data(bookService.getBooksFeaturedByCategoryId(categoryId, page, limit))
                        .build()
        );
    }

    @GetMapping("/title/{title}")
    public ResponseEntity<ApiResponse<BookResponse>> getBookByTitle(@PathVariable("title") String title) {
        log.info("Get book by title: {}", title);
        return ResponseEntity.ok(
                ApiResponse.<BookResponse>builder()
                        .success(true)
                        .message("Get book by title: " + title + " successfully!")
                        .data(bookService.getBookByTitle(title))
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<BookResponse>> createBook(
            @Valid @RequestBody BookRequest bookRequest
            ) {
        log.info("Create book with title: {}", bookRequest.getTitle());
        return ResponseEntity.ok(
                ApiResponse.<BookResponse>builder()
                        .success(true)
                        .message("Create book with title: " + bookRequest.getTitle() + " successfully!")
                        .data(bookService.createBook(bookRequest))
                        .build()
        );
    }

    @PutMapping("{id}")
    public ResponseEntity<ApiResponse<BookResponse>> updateBook(
            @PathVariable("id") Long id,
            @Valid @RequestBody BookRequest bookRequest
    ) {
        log.info("Update book with id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<BookResponse>builder()
                        .success(true)
                        .message("Update book with id: " + id + " successfully!")
                        .data(bookService.updateBook(id, bookRequest))
                        .build()
        );
    }

    @DeleteMapping("{id}")
    public ResponseEntity<ApiResponse<Void>> deleteBook(@PathVariable("id") Long id) {
        log.info("Delete book with id: {}", id);
        bookService.deleteBook(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Delete book with id: " + id + " successfully!")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/BookDocumentController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.elasticsearch.BookDocument;
import com.bookstore.app.service.BookDocumentService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/book-document")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class BookDocumentController {
    BookDocumentService bookDocumentService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<BookDocument>>> getAll() {
        log.info("Fetching all book documents");
        return ResponseEntity.ok(
                ApiResponse.<List<BookDocument>>builder()
                        .success(true)
                        .message("Book documents fetched successfully")
                        .data(bookDocumentService.getAll())
                        .build()
        );
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<BookDocument>> getBookDocumentById(
            @PathVariable("id") String id
    ) {
        log.info("Fetching book document with id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<BookDocument>builder()
                        .success(true)
                        .message("Book document fetched successfully")
                        .data(bookDocumentService.getBookDocumentById(id))
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<BookDocument>> addBookDocument(
            @RequestBody BookDocument bookDocument
    ) {
        log.info("Adding new book document");
        return ResponseEntity.ok(
                ApiResponse.<BookDocument>builder()
                        .success(true)
                        .message("Book document added successfully")
                        .data(bookDocumentService.addBookDocument(bookDocument))
                        .build()
        );
    }

    @PostMapping("save-all")
    public ResponseEntity<ApiResponse<List<BookDocument>>> saveAll() {
      log.info("Saving all book documents");
      return ResponseEntity.ok(
              ApiResponse.<List<BookDocument>>builder()
                      .success(true)
                      .message("Book documents saved successfully")
                      .data(bookDocumentService.saveAll())
                      .build()
      );
    }

    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<BookDocument>> updateBookDocument(
            @PathVariable("id") String id,
            @RequestBody BookDocument bookDocument
    ) {
        log.info("Updating book document with id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<BookDocument>builder()
                        .success(true)
                        .message("Book document updated successfully")
                        .data(bookDocumentService.updateBookDocument(id, bookDocument))
                        .build()
        );
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteBookDocumentById(
            @PathVariable("id") String id
    ) {
        log.info("Deleting book document with id: {}", id);
        bookDocumentService.deleteBookDocumentById(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Book document deleted successfully")
                        .data(null)
                        .build()
        );
    }

    @DeleteMapping("delete-all")
    public ResponseEntity<ApiResponse<Void>> deleteAll() {
        log.info("Deleting all book documents");
        bookDocumentService.deleteAll();
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Book documents deleted successfully")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/CacheController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.service.CacheService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/cache")
@Slf4j
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class CacheController {

    CacheService cacheService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<Void>> getAllCache() {
        log.info("Get all cache");
        cacheService.getAllCache();
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Cache retrieved successfully")
                        .build()
        );
    }

    @GetMapping("/get-cache")
    public ResponseEntity<ApiResponse<Object>> getCache(
            @RequestParam("value") String value,
            @RequestParam("key") Object key
    ) {
        log.info("Get cache with value: {} and key: {}", value, key);
        return ResponseEntity.ok(
                ApiResponse.builder()
                        .success(true)
                        .message("Get cache successfully")
                        .data(cacheService.getCache(value, key))
                        .build()
        );
    }

    @GetMapping("/type-cache")
    public ResponseEntity<ApiResponse<String>> getTypeCache() {
        log.info("Get type cache");
        return ResponseEntity.ok(
                ApiResponse.<String>builder()
                        .success(true)
                        .message("Get type cache successfully")
                        .data(cacheService.getTypeCache())
                        .build()
        );
    }

    @GetMapping("/stats")
    public ResponseEntity<ApiResponse<Void>> printCacheStats() {
        log.info("Print cache stats");
        cacheService.printCacheStats();
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Cache stats printed successfully")
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/CartController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.request.CartRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.service.CartService;
import com.bookstore.app.utils.CartItems;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/cart")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class CartController {

    CartService cartService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<CartItems>> getItems(@CookieValue(value = "cartId", defaultValue = "") String cartId) {
        log.info("Get items in cart from cartId: {}", cartId);
        return ResponseEntity.ok(
                ApiResponse.<CartItems>builder()
                        .success(true)
                        .message("Get items in cart successfully with cartId: " + cartId)
                        .data(cartService.getItems(cartId))
                        .build()
        );
    }

    @PostMapping("/add")
    public ResponseEntity<ApiResponse<Void>> addItems(@CookieValue(value = "cartId", defaultValue = "") String cartId,
                                                      @Valid @RequestBody CartRequest cartRequest,
                                                      HttpServletResponse response) {
        log.info("Add items to cart from cartId: {}", cartId);
        String cartIdValue = cartService.addItems(cartId, cartRequest.getBookId(), cartRequest.getQuantity());

        Cookie cookie = new Cookie("cartId", cartIdValue);
        cookie.setPath("/");
        cookie.setSecure(false);
        cookie.setHttpOnly(true);
        cookie.setMaxAge(60 * 60 * 24);
        response.addCookie(cookie);

        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Add items to cart successfully with cartId: " + cartId)
                        .data(null)
                        .build()
        );
    }

    @PostMapping("/minus")
    public ResponseEntity<ApiResponse<Void>> minusItems(@CookieValue(value = "cartId", defaultValue = "") String cartId,
                                                         @Valid @RequestBody CartRequest cartRequest) {
        log.info("Minus items in cart from cartId: {}", cartId);
        cartService.minusItems(cartId, cartRequest.getBookId(), cartRequest.getQuantity());
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Minus items in cart successfully with cartId: " + cartId)
                        .data(null)
                        .build()
        );
    }

    @DeleteMapping("/remove")
    public ResponseEntity<ApiResponse<Void>> removeItem(@CookieValue(value = "cartId", defaultValue = "") String cartId,
                                                         @RequestParam("bookId") String bookId) {
        log.info("Remove item in cart from cartId: {}", cartId);
        cartService.removeItem(cartId,bookId);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Remove item in cart successfully with cartId: " + cartId)
                        .data(null)
                        .build()
        );
    }

    @GetMapping("/total-items")
    public ResponseEntity<ApiResponse<Integer>> getTotalItems(@CookieValue(value = "cartId", defaultValue = "") String cartId) {
        log.info("Get total items in cart from cartId: {}", cartId);
        return ResponseEntity.ok(
                ApiResponse.<Integer>builder()
                        .success(true)
                        .message("Get total items in cart successfully with cartId: " + cartId)
                        .data(cartService.getTotalItems(cartId))
                        .build()
        );
    }

    @GetMapping("/total-quantities")
    public ResponseEntity<ApiResponse<Integer>> getTotalQuantities(@CookieValue(value = "cartId", defaultValue = "") String cartId) {
        log.info("Get total quantities in cart from cartId: {}", cartId);
        return ResponseEntity.ok(
                ApiResponse.<Integer>builder()
                        .success(true)
                        .message("Get total quantities in cart successfully with cartId: " + cartId)
                        .data(cartService.getTotalQuantities(cartId))
                        .build()
        );
    }

    @DeleteMapping("/clear")
    public ResponseEntity<ApiResponse<Void>> clearItems(@CookieValue(value = "cartId", defaultValue = "") String cartId) {
        log.info("Clear items in cart from cartId: {}", cartId);
        cartService.clearItems(cartId);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Clear items in cart successfully with cartId: " + cartId)
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/CategoryController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.request.CategoryRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.CategoryResponse;
import com.bookstore.app.service.CategoryService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@FieldDefaults(level = lombok.AccessLevel.PRIVATE, makeFinal = true)
@RequestMapping("/api/v1/category")
@Slf4j
public class CategoryController {
    CategoryService categoryService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<CategoryResponse>>> getAll() {
        log.info("Get all categories");
        return ResponseEntity.ok(
                ApiResponse.<List<CategoryResponse>>builder()
                        .success(true)
                        .message("Get all categories")
                        .data(this.categoryService.getAll())
                        .build()
        );
    }

    @GetMapping("{id}")
    public ResponseEntity<ApiResponse<CategoryResponse>> getCategoryById(@PathVariable("id") Long id) {
        log.info("Get category by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<CategoryResponse>builder()
                        .success(true)
                        .message("Get category by id: " + id)
                        .data(this.categoryService.getCategoryById(id))
                        .build()
        );
    }

    @GetMapping("featured")
    public ResponseEntity<ApiResponse<List<CategoryResponse>>> getCategoriesFeatured() {
        log.info("Get categories featured");
        return ResponseEntity.ok(
                ApiResponse.<List<CategoryResponse>>builder()
                        .success(true)
                        .message("Get categories featured successfully!")
                        .data(categoryService.getCategoriesFeatured())
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<CategoryResponse>> createCategory(
            @Valid @RequestBody CategoryRequest categoryRequest
            ) {
        log.info("Create category: {}", categoryRequest);
        return ResponseEntity.ok(
                ApiResponse.<CategoryResponse>builder()
                        .success(true)
                        .message("Category created successfully!")
                        .data(this.categoryService.createCategory(categoryRequest))
                        .build()
        );
    }

    @PutMapping("{id}")
    public ResponseEntity<ApiResponse<CategoryResponse>> updateCategory(
            @PathVariable("id") Long id,
            @Valid @RequestBody CategoryRequest categoryRequest
    ) {
        log.info("Update category by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<CategoryResponse>builder()
                        .success(true)
                        .message("Category updated successfully!")
                        .data(categoryService.updateCategory(id, categoryRequest))
                        .build()
        );
    }

    @DeleteMapping("{id}")
    public ResponseEntity<ApiResponse<Void>> deleteCategoryById(@PathVariable("id") Long id) {
        log.info("Delete category by id: {}", id);
        categoryService.deleteCategoryById(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Category deleted successfully!")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/CloudinaryController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.service.CloudinaryService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/v1/cloudinary")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class CloudinaryController {

    CloudinaryService cloudinaryService;

    @GetMapping("/{public_id}")
    public ResponseEntity<ApiResponse<com.cloudinary.api.ApiResponse>> getImage(@PathVariable String public_id) {
        log.info("Fetching image with public_id: {}", public_id);
        return ResponseEntity.ok(
                ApiResponse.<com.cloudinary.api.ApiResponse>builder()
                        .success(true)
                        .message("Image fetched successfully")
                        .data(cloudinaryService.get(public_id))
                        .build()
        );
    }

    @PostMapping("/upload")
    public ResponseEntity<ApiResponse<Void>> upload(@RequestParam("file")MultipartFile file) {
        log.info("Uploading file: {}", file.getOriginalFilename());
        cloudinaryService.upload(file);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("File uploaded successfully")
                        .build()
        );
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> delete(@PathVariable String id) {
        log.info("Deleting image with public_id: {}", id);
        cloudinaryService.delete(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Image deleted successfully")
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/NotificationController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.service.NotificationService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/api/v1/notification")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class NotificationController {

    NotificationService notificationService;

    @GetMapping("/send")
    public ResponseEntity<ApiResponse<Void>> sendNotification(@RequestParam("message") String message) {
        log.info("Sending notification with message: {}", message);
        notificationService.sendNotification(message);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Notification sent successfully")
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/OrderController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.OrderResponse;
import com.bookstore.app.service.OrderService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/v1/order")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class OrderController {
    OrderService orderService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<OrderResponse>>> getAll() {
        log.info("Get all orders");
        return ResponseEntity.ok(
                ApiResponse.<List<OrderResponse>>builder()
                        .success(true)
                        .message("Get all orders")
                        .data(orderService.getAll())
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/OrderDetailController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.OrderDetailResponse;
import com.bookstore.app.service.OrderDetailService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/v1/order-detail")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class OrderDetailController {
    OrderDetailService orderDetailService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<OrderDetailResponse>>> getAll() {
        log.info("Get all order details");
        return ResponseEntity.ok(
                ApiResponse.<List<OrderDetailResponse>>builder()
                        .success(true)
                        .message("Get all order details")
                        .data(this.orderDetailService.getAll())
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/PasswordResetTokenController.java
================
package com.bookstore.app.controller;

public class PasswordResetTokenController {
}

================
File: src/main/java/com/bookstore/app/controller/RegistrationController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RegisterRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.entity.User;
import com.bookstore.app.event.OnRegistrationCompleteEvent;
import com.bookstore.app.service.RegistrationService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/api/v1/register")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class RegistrationController {

    RegistrationService registrationService;
    ApplicationEventPublisher applicationEventPublisher;
    ModelMapper modelMapper;

    @PostMapping("")
    public ResponseEntity<ApiResponse<UserResponse>> register(
            @Valid @RequestBody RegisterRequest registerRequest, HttpServletRequest request
            ) {
        log.info("Register user with email: {}", registerRequest.getEmail());
        UserResponse userResponse = registrationService.register(registerRequest, RoleType.USER);
        User user = modelMapper.map(userResponse, User.class);
        String appUrl = buildUrl(request);
        applicationEventPublisher.publishEvent(new OnRegistrationCompleteEvent(user, appUrl));
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("User registered successfully! Please check your email for confirmation")
                        .data(userResponse)
                        .build()
        );
    }

    @GetMapping("/confirm-registration")
    public ResponseEntity<ApiResponse<Void>> confirmRegistration(
            @RequestParam("token") String token
    ) {
        registrationService.confirmRegistration(token);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("User confirmed successfully! Please login to continue")
                        .data(null)
                        .build()
        );
    }

    @GetMapping("resend")
    public ResponseEntity<ApiResponse<Void>> resendVerificationEmail(@RequestParam("email") String email,
                                                         HttpServletRequest request) {
        log.info("Resend email for user with email: {}", email);
        User user = modelMapper.map(registrationService.resendEmail(email), User.class);
        String appUrl = buildUrl(request);
        applicationEventPublisher.publishEvent(new OnRegistrationCompleteEvent(user, appUrl));
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Email sent successfully")
                        .data(null)
                        .build()
        );
    }

    private String buildUrl(HttpServletRequest request) {
        return "http://" + request.getServerName() + ":" + request.getServerPort() + "/"
                + "api/v1/register/confirm-registration";
    }
}

================
File: src/main/java/com/bookstore/app/controller/RoleController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RoleRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.RoleResponse;
import com.bookstore.app.service.RoleService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/role")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class RoleController {
    RoleService roleService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<RoleResponse>>> getAll() {
        log.info("Get all roles");
        return ResponseEntity.ok(
                ApiResponse.<List<RoleResponse>>builder()
                        .success(true)
                        .message("Get all roles successfully!")
                        .data(this.roleService.getAll())
                        .build()
        );
    }

    @GetMapping("{id}")
    public ResponseEntity<ApiResponse<RoleResponse>> getRoleById(@PathVariable("id") Long id) {
        log.info("Get role by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<RoleResponse>builder()
                        .success(true)
                        .message("Get role by id: " + id + " successfully!")
                        .data(roleService.getRoleById(id))
                        .build()
        );
    }

    @GetMapping("/name/{name}")
    public ResponseEntity<ApiResponse<RoleResponse>> getRoleByName(@PathVariable("name") String name) {
        log.info("Get role by name: {}", name);
        RoleType roleName = RoleType.ADMIN.name().toLowerCase().equals(name) ? RoleType.ADMIN : RoleType.USER;
        return ResponseEntity.ok(
                ApiResponse.<RoleResponse>builder()
                        .success(true)
                        .message("Get role by name: " + name  + " successfully!")
                        .data(roleService.getRoleByName(roleName))
                        .build()
        );
    }

//    Khong the them moi doi voi enum
//    @PostMapping("")
//    public ResponseEntity<ApiResponse<RoleResponse>> createRole(
//            @Valid @RequestBody RoleRequest roleRequest) {
//        return ResponseEntity.ok(
//                ApiResponse.<RoleResponse>builder()
//                        .success(true)
//                        .message("Role created successfully")
//                        .data(roleService.createRole(roleRequest))
//                        .build()
//        );
//    }

    @PutMapping("{id}")
    public ResponseEntity<ApiResponse<RoleResponse>> updateRole(
            @PathVariable("id") Long id,
            @Valid @RequestBody RoleRequest roleRequest
    ) {
        log.info("Update role by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<RoleResponse>builder()
                        .success(true)
                        .message("Role updated successfully")
                        .data(roleService.updateRole(id, roleRequest))
                        .build()
        );
    }

    @DeleteMapping("{id}")
    public ResponseEntity<ApiResponse<Void>> deleteRole(@PathVariable("id") Long id) {
        log.info("Delete role by id: {}", id);
        roleService.deleteRoleById(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Role deleted successfully")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/SearchController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.elasticsearch.BookDocument;
import com.bookstore.app.service.SearchService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/search")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class SearchController {

    SearchService searchService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<Page<BookDocument>>> searchBookDocuments(
            @RequestParam(value = "title", defaultValue = "") String title,
            @RequestParam(value = "author", defaultValue = "") String author,
            @RequestParam(value = "category", defaultValue = "") String category,
            @RequestParam(value = "pageNumber", defaultValue = "0") int pageNumber,
            @RequestParam(value = "pageSize", defaultValue = "10") int pageSize,
            @RequestParam(value = "order", defaultValue = "") String order
    ) {
        log.info("Searching for books with title: {}, author: {}, category: {}, pageNumber: {}, pageSize: {}, order: {}",
                title, author, category, pageNumber, pageSize, order
        );
        return ResponseEntity.ok(
                ApiResponse.<Page<BookDocument>>builder()
                        .success(true)
                        .message("Books found")
                        .data(searchService.search(title, author, category, pageNumber, pageSize, order))
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/UserController.java
================
package com.bookstore.app.controller;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RegisterRequest;
import com.bookstore.app.dto.response.ApiResponse;
import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.service.MailService;
import com.bookstore.app.service.UserService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/user")
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class UserController {
    UserService userService;
    MailService mailService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<UserResponse>>> getAll() {
        log.info("Get all user");
        return ResponseEntity.ok(
                ApiResponse.<List<UserResponse>>builder()
                        .success(true)
                        .message("Get all user successfully!")
                        .data(userService.getAll())
                        .build()
        );
    }

    @GetMapping("{id}")
    public ResponseEntity<ApiResponse<UserResponse>> getUserById(@PathVariable Long id) {
        log.info("Get user by id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("Get user by id: " + id + " successfully!")
                        .data(userService.getUserById(id))
                        .build()
        );
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<ApiResponse<UserResponse>> getUserByEmail(@PathVariable String email) {
        log.info("Get user by email: {}", email);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("Get user by email: " + email + " successfully!")
                        .data(userService.getUserByEmail(email))
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<UserResponse>> createUser(
            @Valid @RequestBody RegisterRequest registerRequest
            ) {
        log.info("Create user with email: {}", registerRequest.getEmail());
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("Create user with email: " + registerRequest.getEmail() + " successfully!")
                        .data(userService.createUserWithRole(registerRequest, RoleType.USER))
                        .build()
        );
    }

    @PutMapping("{id}")
    public ResponseEntity<ApiResponse<UserResponse>> updateUser(
            @PathVariable Long id,
            @Valid @RequestBody RegisterRequest registerRequest
            ) {
        log.info("Update user with id: {}", id);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("Update user with id: " + id + " successfully!")
                        .data(userService.updateUser(id, registerRequest))
                        .build()
        );
    }

    @DeleteMapping("{id}")
    public ResponseEntity<ApiResponse<Void>> deleteUser(@PathVariable Long id) {
        log.info("Delete user with id: {}", id);
        userService.deleteUser(id);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Delete user with id: " + id + " successfully!")
                        .data(null)
                        .build()
        );
    }

    @GetMapping("mail")
    public ResponseEntity<ApiResponse<Void>> sendMail() {
        log.info("Send mail");
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        mailService.sendEmail(userDetails.getUsername(), "Test send email", "TEST");
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Email is being sent! Please check your inbox.")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/controller/VerificationTokenController.java
================
package com.bookstore.app.controller;

public class VerificationTokenController {
}

================
File: src/main/java/com/bookstore/app/controller/WebSocketController.java
================
package com.bookstore.app.controller;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;

@Controller
public class WebSocketController {

    @MessageMapping("/sendNotification")
    @SendTo("/topic/notifications")
    public String sendNotification(String message) {
        return message;
    }
}

================
File: src/main/java/com/bookstore/app/dto/request/AuthorRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.NotBlank;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class AuthorRequest {
    @NotBlank
    private String name;
}

================
File: src/main/java/com/bookstore/app/dto/request/BookRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.AccessLevel;
import lombok.Data;
import lombok.experimental.FieldDefaults;

import java.time.LocalDate;
import java.util.Set;

@Data
@FieldDefaults(level = AccessLevel.PRIVATE)
public class BookRequest {
    @NotBlank
    String title;

    @NotBlank
    String description;

    @NotBlank
    String isbn;

    @NotBlank
    String smallImageUrl;

    @NotBlank
    String mediumImageUrl;

    @NotBlank
    String largeImageUrl;

    @NotNull
    double price;

    @NotNull
    LocalDate publishedDate;

    @NotEmpty
    Set<Long> authorsId;

    @NotEmpty
    Set<Long> categoriesId;
}

================
File: src/main/java/com/bookstore/app/dto/request/CartRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class CartRequest {

    @NotBlank
    String bookId;

    @NotNull
    Integer quantity;

}

================
File: src/main/java/com/bookstore/app/dto/request/CategoryRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.NotBlank;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class CategoryRequest {
    @NotBlank
    String name;
}

================
File: src/main/java/com/bookstore/app/dto/request/LoginRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class LoginRequest {

    @Email
    @NotBlank
    String email;

    @NotBlank
    String password;
}

================
File: src/main/java/com/bookstore/app/dto/request/RegisterRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.*;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class RegisterRequest {

    @Email
    @NotBlank
    String email;

    @NotBlank
    @Size(max = 100)
    String fullName;

    @NotBlank
    @Size(min = 8, message = "Password must be at least 8 characters")
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).*$", message = "Password must contain at least one uppercase letter, one lowercase letter, and one number")
    String password;

    String phone;
    String address;
}

================
File: src/main/java/com/bookstore/app/dto/request/ResetPasswordRequest.java
================
package com.bookstore.app.dto.request;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class ResetPasswordRequest {

    @NotNull
    Long userId;

    @NotNull
    String token;

    @NotBlank
    @Size(min = 8)
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).*$", message = "Password must contain at least one uppercase letter, one lowercase letter, and one digit")
    String newPassword;
}

================
File: src/main/java/com/bookstore/app/dto/request/RoleRequest.java
================
package com.bookstore.app.dto.request;

import com.bookstore.app.constant.RoleType;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class RoleRequest {
    @NotNull
    RoleType name;

    @NotBlank
    String description;
}

================
File: src/main/java/com/bookstore/app/dto/request/UserRequest.java
================
package com.bookstore.app.dto.request;

public class UserRequest {
}

================
File: src/main/java/com/bookstore/app/dto/response/ApiResponse.java
================
package com.bookstore.app.dto.response;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.FieldDefaults;

@Builder
@FieldDefaults(level = AccessLevel.PRIVATE)
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@Setter
public class ApiResponse<T> {
    boolean success;
    String message;
    T data;
}

================
File: src/main/java/com/bookstore/app/dto/response/AuthorResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class AuthorResponse {
    Long authorId;
    String name;
}

================
File: src/main/java/com/bookstore/app/dto/response/BookResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;
import lombok.experimental.FieldDefaults;

import java.time.LocalDate;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class BookResponse {
     Long bookId;
     String title;
     String description;
     String isbn;
     String smallImageUrl;
     String mediumImageUrl;
     String largeImageUrl;
     double price;
     LocalDate publishedDate;
    Set<AuthorResponse> authors;
    Set<CategoryResponse> categories;
}

================
File: src/main/java/com/bookstore/app/dto/response/CategoryResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class CategoryResponse {
    Long categoryId;
    String name;
}

================
File: src/main/java/com/bookstore/app/dto/response/JwtTokenResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;
import lombok.experimental.FieldDefaults;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@ToString
@FieldDefaults(level = AccessLevel.PRIVATE)
public class JwtTokenResponse {
    String accessToken;
    long accessTokenExpiration;
    String refreshToken;
    long refreshTokenExpiration;
    UserResponse user;
}

================
File: src/main/java/com/bookstore/app/dto/response/NotificationMessage.java
================
package com.bookstore.app.dto.response;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
public class NotificationMessage {
    String message;
}

================
File: src/main/java/com/bookstore/app/dto/response/OrderDetailResponse.java
================
package com.bookstore.app.dto.response;

import com.bookstore.app.entity.Book;
import lombok.AccessLevel;
import lombok.Data;
import lombok.experimental.FieldDefaults;

@Data
@FieldDefaults(level = AccessLevel.PRIVATE)
public class OrderDetailResponse {
    Long orderDetailId;
    int quantity;
    double subTotal;
    Book books;
}

================
File: src/main/java/com/bookstore/app/dto/response/OrderResponse.java
================
package com.bookstore.app.dto.response;

import com.bookstore.app.constant.OrderStatusType;
import com.bookstore.app.entity.OrderDetail;
import lombok.AccessLevel;
import lombok.Data;
import lombok.experimental.FieldDefaults;

import java.time.LocalDateTime;
import java.util.Set;

@Data
@FieldDefaults(level = AccessLevel.PRIVATE)
public class OrderResponse {
    Long orderId;
    UserResponse user;
    LocalDateTime orderDate;
    String shippingAddress;
    String recipientName;
    String recipientPhone;
    String paymentMethod;
    double shippingCost;
    int bookCopies;
    double total;
    OrderStatusType orderStatus;
    Set<OrderDetail> orderDetails;
}

================
File: src/main/java/com/bookstore/app/dto/response/PageResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;

import java.util.List;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class PageResponse<T> {
    List<T> content;
    int number;
    int size;
    long totalElements;
    int totalPages;
    int numberOfElements;
    boolean last;
    boolean first;
    boolean empty;

}

================
File: src/main/java/com/bookstore/app/dto/response/RoleResponse.java
================
package com.bookstore.app.dto.response;

import com.bookstore.app.constant.RoleType;
import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class RoleResponse {
    Long roleId;
    RoleType name;
    String description;
}

================
File: src/main/java/com/bookstore/app/dto/response/UserProfileResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;
import lombok.experimental.FieldDefaults;

@Getter
@Setter
@FieldDefaults(level = AccessLevel.PRIVATE)
@AllArgsConstructor
@NoArgsConstructor
public class UserProfileResponse {
    Long userId;
    String email;
    String fullName;
    String phone;
    String address;
}

================
File: src/main/java/com/bookstore/app/dto/response/UserResponse.java
================
package com.bookstore.app.dto.response;

import lombok.*;
import lombok.experimental.FieldDefaults;

import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
public class UserResponse {
    Long userId;
    String email;
    String fullName;
    String phone;
    String address;
    boolean isActive;
    Set<RoleResponse> roles;
}

================
File: src/main/java/com/bookstore/app/elasticsearch/BookDocument.java
================
package com.bookstore.app.elasticsearch;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.*;
import lombok.experimental.FieldDefaults;
import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.*;

import java.time.LocalDate;
import java.util.List;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE)
@Document(indexName = "books")
public class BookDocument {
    @Id
    String bookId;

    @MultiField(
            mainField = @Field(type = FieldType.Text),
            otherFields = {
                    @InnerField(type = FieldType.Keyword, suffix = "keyword")
            }
    )
    String title;

    @Field(type = FieldType.Text)
    String description;

    @Field(type = FieldType.Text)
    String smallImageUrl;

    @Field(type = FieldType.Double)
    double price;

    @Field(type = FieldType.Date, format = {}, pattern = "yyyy-MM-dd")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    LocalDate publishedDate;

    @Field(type = FieldType.Keyword)
    List<String> authors;

    @Field(type = FieldType.Keyword)
    List<String> categories;
}

================
File: src/main/java/com/bookstore/app/elasticsearch/BookDocumentRepository.java
================
package com.bookstore.app.elasticsearch;

import org.springframework.data.elasticsearch.annotations.Query;
import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;

import java.util.List;

public interface BookDocumentRepository extends ElasticsearchRepository<BookDocument, String> {
    @Query(value = "{" +
            "\"term\": {\"title\": \"?0\"}" +
    "}")
    List<BookDocument> findByTitle(String title);
}

================
File: src/main/java/com/bookstore/app/entity/Author.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "authors")
public class Author {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "author_id")
    private Long authorId;

    @Column(nullable = false, unique = true)
    private String name;

    @ManyToMany(mappedBy = "authors")
    private Set<Book> books = new HashSet<>();
}

================
File: src/main/java/com/bookstore/app/entity/Book.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "books")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "book_id")
    private Long bookId;

    @Column(nullable = false)
    private String title;

    @Column(nullable = false, length = 16777215)
    private String description;

    @Column(nullable = false)
    private String isbn;

    @Column(nullable = false)
    private String smallImageUrl;

    @Column(nullable = false)
    private String mediumImageUrl;

    @Column(nullable = false)
    private String largeImageUrl;

    @Column(nullable = false, precision = 2)
    private double price;

    @Column(nullable = false)
    private LocalDate publishedDate;

    @CreationTimestamp
    private LocalDateTime lastUpdated;

    @ManyToMany
    @JoinTable(
            name = "books_authors",
            joinColumns = @JoinColumn(name = "book_id", referencedColumnName = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "author_id", referencedColumnName = "author_id")
    )
    private Set<Author> authors = new HashSet<>();

    @ManyToMany
    @JoinTable(
            name = "books_categories",
            joinColumns = @JoinColumn(name = "book_id", referencedColumnName = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "category_id", referencedColumnName = "category_id")
    )
    private Set<Category> categories = new HashSet<>();

    @OneToMany(mappedBy = "books")
    private Set<OrderDetail> orderDetails = new HashSet<>();
}

================
File: src/main/java/com/bookstore/app/entity/Category.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "categories")
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id")
    private Long categoryId;

    @Column(nullable = false, unique = true)
    private String name;

    @ManyToMany(mappedBy = "categories")
    private Set<Book> books = new HashSet<>();
}

================
File: src/main/java/com/bookstore/app/entity/Order.java
================
package com.bookstore.app.entity;

import com.bookstore.app.constant.OrderStatusType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "orders")
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_id")
    private Long orderId;

    @ManyToOne
    @JoinColumn(referencedColumnName = "user_id")
    private User user;

    @CreationTimestamp
    private LocalDateTime orderDate;

    @Column(nullable = false)
    private String shippingAddress;

    @Column(nullable = false, length = 50)
    private String recipientName;

    @Column(nullable = false, length = 10)
    private String recipientPhone;

    @Column(nullable = false)
    private String paymentMethod;

    @Column(nullable = false, precision = 2)
    private double shippingCost;

    @Column(nullable = false)
    private int bookCopies;

    @Column(nullable = false, precision = 2)
    private double total;

    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private OrderStatusType orderStatus;

    @OneToMany(mappedBy = "orders")
    private Set<OrderDetail> orderDetails = new HashSet<>();
}

================
File: src/main/java/com/bookstore/app/entity/OrderDetail.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class OrderDetail {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_detail_id")
    private Long orderDetailId;

    @Column(nullable = false)
    private int quantity;

    @Column(nullable = false, precision = 2)
    private double subTotal;

    @ManyToOne
    @JoinColumn(referencedColumnName = "book_id")
    private Book books;

    @ManyToOne
    @JoinColumn(referencedColumnName = "order_id")
    private Order orders;

}

================
File: src/main/java/com/bookstore/app/entity/PasswordResetToken.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "password_reset_token")
public class PasswordResetToken {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String token;

    @OneToOne(targetEntity = User.class)
    @JoinColumn(name = "user_id", nullable = false, referencedColumnName = "user_id")
    private User user;

    private LocalDateTime expiryDate;
}

================
File: src/main/java/com/bookstore/app/entity/Role.java
================
package com.bookstore.app.entity;

import com.bookstore.app.constant.RoleType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "roles")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "role_id")
    private Long roleId;

    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private RoleType name;

    @Column(nullable = false)
    private String description;

    @ManyToMany(mappedBy = "roles")
    private Set<User> users = new HashSet<>();

}

================
File: src/main/java/com/bookstore/app/entity/User.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id")
    private Long userId;

    @Column(nullable = false, unique = true)
    private String email;

    private String fullName;
    private String password;
    private String phone;
    private String address;

    @Column(nullable = false)
    private boolean isActive = false;

    @ManyToMany
    @JoinTable(
            name = "users_roles",
            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id", referencedColumnName = "role_id")
    )
    private Set<Role> roles = new HashSet<>();

    @OneToMany(mappedBy = "user")
    private Set<Order> orders = new HashSet<>();
}

================
File: src/main/java/com/bookstore/app/entity/VerificationToken.java
================
package com.bookstore.app.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "verification_token")
public class VerificationToken {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String token;

    @OneToOne(targetEntity = User.class)
    @JoinColumn(name = "user_id", nullable = false, referencedColumnName = "user_id")
    private User user;

    private LocalDateTime expiryDate;
}

================
File: src/main/java/com/bookstore/app/event/OnRegistrationCompleteEvent.java
================
package com.bookstore.app.event;

import com.bookstore.app.entity.User;
import lombok.Getter;
import lombok.Setter;
import org.springframework.context.ApplicationEvent;

@Getter
@Setter
public class OnRegistrationCompleteEvent extends ApplicationEvent {
    private String appUrl;
    private User user;


    public OnRegistrationCompleteEvent(User user, String appUrl) {
        super(user);
        this.user = user;
        this.appUrl = appUrl;
    }
}

================
File: src/main/java/com/bookstore/app/event/OnResetPasswordEvent.java
================
package com.bookstore.app.event;

import com.bookstore.app.entity.User;
import lombok.Getter;
import lombok.Setter;
import org.springframework.context.ApplicationEvent;

@Getter
@Setter
public class OnResetPasswordEvent extends ApplicationEvent {
    private User user;
    private String appUrl;

    public OnResetPasswordEvent(User user, String appUrl) {
        super(user);
        this.user = user;
        this.appUrl = appUrl;
    }
}

================
File: src/main/java/com/bookstore/app/event/RegistrationCompleteListener.java
================
package com.bookstore.app.event;

import com.bookstore.app.entity.User;
import com.bookstore.app.service.MailService;
import com.bookstore.app.service.VerificationTokenService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Slf4j
@Component
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class RegistrationCompleteListener implements ApplicationListener<OnRegistrationCompleteEvent> {

    MailService mailService;
    VerificationTokenService verificationTokenService;

    @Override

    public void onApplicationEvent(OnRegistrationCompleteEvent event) {
        confirmRegistration(event);
    }

    private void confirmRegistration(OnRegistrationCompleteEvent event) {
        User user = event.getUser();
        String token = UUID.randomUUID().toString();
        verificationTokenService.createToken(user, token);

        String userEmail = user.getEmail();
        String subject = "Registration Confirmation";
        String text = "To confirm your e-mail address, please click the link below:\n"
                + event.getAppUrl() + "?token=" + token;
        mailService.sendEmail(userEmail, subject, text);
        log.info("Registration confirmation e-mail sent to {}", userEmail);
    }
}

================
File: src/main/java/com/bookstore/app/event/ResetPasswordListener.java
================
package com.bookstore.app.event;

import com.bookstore.app.entity.User;
import com.bookstore.app.service.MailService;
import com.bookstore.app.service.PasswordResetTokenService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class ResetPasswordListener implements ApplicationListener<OnResetPasswordEvent> {

    PasswordResetTokenService passwordResetTokenService;
    MailService mailService;

    @Override
    public void onApplicationEvent(OnResetPasswordEvent event) {
        createResetPasswordToken(event);
    }

    private void createResetPasswordToken(OnResetPasswordEvent event) {
        User user = event.getUser();
        String token = UUID.randomUUID().toString();
        passwordResetTokenService.createToken(user,token);
        String to = user.getEmail();
        String subject = "Password Reset Request";
        String text = "To reset your password, please click the link below:\n"
                + event.getAppUrl() + "?token=" + token;
        mailService.sendEmail(to, subject, text);
    }
}

================
File: src/main/java/com/bookstore/app/exception/BadCredentialsException.java
================
package com.bookstore.app.exception;

public class BadCredentialsException extends RuntimeException {
    public BadCredentialsException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/bookstore/app/exception/GlobalExceptionHandler.java
================
package com.bookstore.app.exception;

import com.bookstore.app.dto.response.ApiResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    @ExceptionHandler(value = ResourceNotFoundException.class)
    public ResponseEntity<ApiResponse<Void>> handleResourceNotFoundException(ResourceNotFoundException ex) {
        log.error("Resource not found exception: {}", ex.getMessage());
        return new ResponseEntity<>(ApiResponse.<Void>builder()
                .success(false)
                .message(ex.getMessage())
                .data(null)
                .build(),
                HttpStatus.NOT_FOUND
        );
    }

    @ExceptionHandler(value = ResourceAlreadyExistsException.class)
    public ResponseEntity<ApiResponse<Void>> handleResourceAlreadyExistsException(ResourceAlreadyExistsException ex) {
        log.error("Resource already exists exception: {}", ex.getMessage());
        return new ResponseEntity<>(
                ApiResponse.<Void>builder()
                        .success(false)
                        .message(ex.getMessage())
                        .data(null)
                        .build(),
                HttpStatus.CONFLICT
        );
    }

    @ExceptionHandler(value = BadCredentialsException.class)
    public ResponseEntity<ApiResponse<Void>> handleBadCredentialsException(BadCredentialsException ex) {
        log.error("Bad credentials exception: {}", ex.getMessage());
        return new ResponseEntity<>(
                ApiResponse.<Void>builder()
                        .success(false)
                        .message(ex.getMessage())
                        .data(null)
                        .build(),
                HttpStatus.BAD_REQUEST
        );
    }

    @ExceptionHandler(value = UserNotActiveException.class)
    public ResponseEntity<ApiResponse<Void>> handleUserNotActiveException(UserNotActiveException ex) {
        log.error("User not active exception: {}", ex.getMessage());
        return new ResponseEntity<>(
                ApiResponse.<Void>builder()
                        .success(false)
                        .message(ex.getMessage())
                        .data(null)
                        .build(),
                HttpStatus.BAD_REQUEST
        );
    }

    @ExceptionHandler(value = TokenExpiredException.class)
    public ResponseEntity<ApiResponse<Void>> handleTokenExpiredException(TokenExpiredException ex) {
        log.error("Token expired exception: {}", ex.getMessage());
        return new ResponseEntity<>(
                ApiResponse.<Void>builder()
                        .success(false)
                        .message(ex.getMessage())
                        .data(null)
                        .build(),
                HttpStatus.BAD_REQUEST
        );
    }
}

================
File: src/main/java/com/bookstore/app/exception/JwtAccessDeniedHandler.java
================
package com.bookstore.app.exception;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAccessDeniedHandler implements AccessDeniedHandler {
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException {
        response.sendError(HttpServletResponse.SC_FORBIDDEN, "Forbidden - You don't have permission to access this resource");
    }
}

================
File: src/main/java/com/bookstore/app/exception/JwtAuthenticationEntryPoint.java
================
package com.bookstore.app.exception;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException {
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized - Invalid or missing JWT token");
    }
}

================
File: src/main/java/com/bookstore/app/exception/ResourceAlreadyExistsException.java
================
package com.bookstore.app.exception;

public class ResourceAlreadyExistsException extends RuntimeException{
    public ResourceAlreadyExistsException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/bookstore/app/exception/ResourceNotFoundException.java
================
package com.bookstore.app.exception;

public class ResourceNotFoundException extends RuntimeException{
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/bookstore/app/exception/TokenExpiredException.java
================
package com.bookstore.app.exception;

public class TokenExpiredException extends RuntimeException {
    public TokenExpiredException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/bookstore/app/exception/UserNotActiveException.java
================
package com.bookstore.app.exception;

public class UserNotActiveException extends RuntimeException{
    public UserNotActiveException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/bookstore/app/filter/JwtAuthenticationFilter.java
================
package com.bookstore.app.filter;

import com.bookstore.app.security.JwtAuthenticationProvider;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    JwtAuthenticationProvider jwtAuthenticationProvider;
    UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        log.info("Request received: {}", request.getRequestURI());
        String authHeader = request.getHeader("Authorization");
        if(authHeader == null || !authHeader.contains("Bearer")) {
            log.info("Request does not contain Authorization header");
            filterChain.doFilter(request, response);
            return;
        }

        try {
            log.info("Request contains Authorization header");
            String jwtToken = authHeader.substring(7);
            String userEmail = jwtAuthenticationProvider.extractUserName(jwtToken);
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if(userEmail != null && authentication == null) {
                log.info("User email is not null and authentication is null");
                UserDetails userDetails = userDetailsService.loadUserByUsername(userEmail);
                if(jwtAuthenticationProvider.isTokenValid(jwtToken, userDetails)) {
                    log.info("Token is valid");
                    UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
                            userDetails,
                            null,
                            userDetails.getAuthorities()
                    );

                    authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);
                    log.info("User authenticated");
                } else {
                    log.warn("Invalid JWT token");
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid JWT token");
                    return;
                }
            }
            filterChain.doFilter(request, response);
        } catch (Exception e) {
            log.error("Error occurred: {}", e.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized - Invalid or expired JWT token");
        }
    }
}

================
File: src/main/java/com/bookstore/app/repository/AuthorRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.Author;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface AuthorRepository extends JpaRepository<Author, Long> {
    Optional<Author> findByName(String name);
}

================
File: src/main/java/com/bookstore/app/repository/BookRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.Book;
import com.bookstore.app.entity.Category;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;
import java.util.Set;

public interface BookRepository extends JpaRepository<Book, Long> {
    Optional<Book> findByTitle(String title);
    List<Book> findByCategories(Set<Category> categories);

    @Query(value = "select b from Book b " +
            "join b.categories c " +
            "where c.categoryId = :categoryId")
    List<Book> findBooksFeaturedByCategory(@Param("categoryId") Long categoryId, Pageable pageable);
}

================
File: src/main/java/com/bookstore/app/repository/CategoryRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.Optional;

public interface CategoryRepository extends JpaRepository<Category, Long> {
    Optional<Category> findByName(String name);

    @Query(value = "SELECT * FROM CATEGORIES ORDER BY RAND() LIMIT 4", nativeQuery = true)
    List<Category> findCategoriesFeatured();
}

================
File: src/main/java/com/bookstore/app/repository/OrderDetailRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.OrderDetail;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderDetailRepository extends JpaRepository<OrderDetail, Long> {
}

================
File: src/main/java/com/bookstore/app/repository/OrderRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.Order;
import org.springframework.data.jpa.repository.JpaRepository;

public interface OrderRepository extends JpaRepository<Order, Long> {
}

================
File: src/main/java/com/bookstore/app/repository/PasswordResetTokenRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.PasswordResetToken;
import com.bookstore.app.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface PasswordResetTokenRepository extends JpaRepository<PasswordResetToken, Long> {
    Optional<PasswordResetToken> findByToken(String token);
    Optional<PasswordResetToken> findByUser(User user);
}

================
File: src/main/java/com/bookstore/app/repository/RoleRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface RoleRepository extends JpaRepository<Role, Long> {
    Optional<Role> findByName(RoleType name);
}

================
File: src/main/java/com/bookstore/app/repository/UserRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.User;
import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {

    @EntityGraph(attributePaths = "roles")
    Optional<User> findByEmail(String email);
}

================
File: src/main/java/com/bookstore/app/repository/VerificationTokenRepository.java
================
package com.bookstore.app.repository;

import com.bookstore.app.entity.User;
import com.bookstore.app.entity.VerificationToken;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface VerificationTokenRepository extends JpaRepository<VerificationToken, Long> {
    Optional<VerificationToken> findByToken(String token);

    Optional<VerificationToken> findByUser(User user);
}

================
File: src/main/java/com/bookstore/app/security/CustomerUserDetails.java
================
package com.bookstore.app.security;

import com.bookstore.app.entity.User;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.stream.Collectors;

@Builder
@ToString
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class CustomerUserDetails implements UserDetails {

    private User user;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return  user.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getName().name()))
                .collect(Collectors.toSet());
    }

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getEmail();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return user.isActive();
    }
}

================
File: src/main/java/com/bookstore/app/security/CustomUserDetailsService.java
================
package com.bookstore.app.security;

import com.bookstore.app.entity.User;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.UserRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class CustomUserDetailsService implements UserDetailsService {

    UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        log.info("Loading user by email: {}", email);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with email: " + email));
        return CustomerUserDetails.builder()
                .user(user)
                .build();
    }
}

================
File: src/main/java/com/bookstore/app/security/JwtAuthenticationProvider.java
================
package com.bookstore.app.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
@Getter
public class JwtAuthenticationProvider {

    @Value("${JWT_SECRETKEY}")
    private String secretKey;

    @Value("${JWT_ACCESS_TOKEN_EXPIRATION}")
    private long jwtAccessTokenExpiration;

    @Value("${JWT_REFRESH_TOKEN_EXPIRATION}")
    private long jwtRefreshTokenExpiration;

    private Key getSignInKey() {
        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    public String extractUserName(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public String generateAccessToken(UserDetails userDetails) {
        Map<String, Object> extractClaims = new HashMap<>();
        extractClaims.put("type", "access");
        extractClaims.put("role", userDetails.getAuthorities());
        return generateToken(extractClaims, userDetails, jwtAccessTokenExpiration);
    }

    public String generateRefreshToken(UserDetails userDetails) {
        Map<String, Object> extractClaims = new HashMap<>();
        extractClaims.put("type", "refresh");
        return generateToken(extractClaims, userDetails, jwtRefreshTokenExpiration);
    }

    public String generateToken(Map<String, Object> extractClaims, UserDetails userDetails, long expiration) {
        return buildToken(extractClaims, userDetails, expiration);
    }

    public String buildToken(Map<String, Object> extractClaims, UserDetails userDetails, long expiration) {
        return Jwts
                .builder()
                .setClaims(extractClaims)
                .setSubject(userDetails.getUsername())
                .setIssuer("book-store-app")
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        String username = userDetails.getUsername();
        return !isTokenExpired(token) && extractUserName(token).equalsIgnoreCase(username);
    }

    public boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public Date extractExpiration(String token) {
        return extractAllClaims(token).getExpiration();
    }

    public String extractTokenType(String token) {
        return extractAllClaims(token).get("type", String.class);
    }
}

================
File: src/main/java/com/bookstore/app/service/AuthorService.java
================
package com.bookstore.app.service;

import com.bookstore.app.dto.request.AuthorRequest;
import com.bookstore.app.dto.response.AuthorResponse;

import java.util.List;

public interface AuthorService {
     List<AuthorResponse> getAll();
     AuthorResponse getAuthorById(Long id);
     AuthorResponse createAuthor(AuthorRequest authorRequest);
     AuthorResponse updateAuthor(Long id, AuthorRequest authorRequest);
     void deleteAuthorById(Long id);
}

================
File: src/main/java/com/bookstore/app/service/AuthService.java
================
package com.bookstore.app.service;

import com.bookstore.app.dto.request.LoginRequest;
import com.bookstore.app.dto.request.ResetPasswordRequest;
import com.bookstore.app.dto.response.JwtTokenResponse;
import com.bookstore.app.dto.response.UserProfileResponse;
import com.bookstore.app.dto.response.UserResponse;

public interface AuthService {
    JwtTokenResponse login(LoginRequest loginRequest);
    UserResponse resetPassword(String email);
    Long confirmResetPassword(String token);
    UserResponse changPassword(ResetPasswordRequest resetPasswordRequest);
    UserProfileResponse getMe();
}

================
File: src/main/java/com/bookstore/app/service/BookDocumentService.java
================
package com.bookstore.app.service;

import com.bookstore.app.elasticsearch.BookDocument;

import java.util.List;

public interface BookDocumentService {
    List<BookDocument> getAll();
    BookDocument getBookDocumentById(String id);
    BookDocument addBookDocument(BookDocument bookDocument);
    List<BookDocument> saveAll();
    BookDocument updateBookDocument(String id, BookDocument bookDocument);
    void deleteBookDocumentById(String id);
    void deleteAll();
}

================
File: src/main/java/com/bookstore/app/service/BookService.java
================
package com.bookstore.app.service;

import com.bookstore.app.dto.request.BookRequest;
import com.bookstore.app.dto.response.BookResponse;
import com.bookstore.app.dto.response.PageResponse;

import java.util.List;

public interface BookService {
    List<BookResponse>  getAll();
    PageResponse<BookResponse> getBooksPagination(int page, int limit);
    BookResponse getBookById(Long id);
    BookResponse getBookByTitle(String title);
    List<BookResponse> getBooksFeatured();
    BookResponse createBook(BookRequest bookRequest);
    BookResponse updateBook(Long id, BookRequest bookRequest);
    void deleteBook(Long id);
    List<BookResponse> getAllByAuthorId(Long authorId);
    List<BookResponse> getBooksByCategoryId(Long categoryId);
    List<BookResponse> getBooksFeaturedByCategoryId(Long categoryId, int page, int limit);
    List<BookResponse> searchByTitle(String title);
}

================
File: src/main/java/com/bookstore/app/service/CacheService.java
================
package com.bookstore.app.service;

public interface CacheService {
    void getAllCache();
    Object getCache(String value, Object key);
    String getTypeCache();
    void printCacheStats();
}

================
File: src/main/java/com/bookstore/app/service/CartService.java
================
package com.bookstore.app.service;

import com.bookstore.app.utils.CartItems;

public interface CartService {
    CartItems getItems(String cartId);
    String addItems(String cartId, String bookId, int quantity);
    void minusItems(String cartId, String bookId, int quantity);
    void removeItem(String cartId, String bookId);
    int getTotalItems(String cartId);
    int getTotalQuantities(String cartId);
    void clearItems(String cartId);

}

================
File: src/main/java/com/bookstore/app/service/CategoryService.java
================
package com.bookstore.app.service;

import com.bookstore.app.dto.request.CategoryRequest;
import com.bookstore.app.dto.response.CategoryResponse;

import java.util.List;

public interface CategoryService {
    List<CategoryResponse> getAll();
    CategoryResponse getCategoryById(Long id);
    List<CategoryResponse> getCategoriesFeatured();
    CategoryResponse createCategory(CategoryRequest categoryRequest);
    CategoryResponse updateCategory(Long id, CategoryRequest categoryRequest);
    void deleteCategoryById(Long id);
}

================
File: src/main/java/com/bookstore/app/service/CloudinaryService.java
================
package com.bookstore.app.service;

import com.cloudinary.api.ApiResponse;
import org.springframework.web.multipart.MultipartFile;

public interface CloudinaryService {
    ApiResponse get(String public_id);
    void upload(MultipartFile file);
    void delete(String public_id);
}

================
File: src/main/java/com/bookstore/app/service/impl/AuthorServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.request.AuthorRequest;
import com.bookstore.app.dto.response.AuthorResponse;
import com.bookstore.app.entity.Author;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.AuthorRepository;
import com.bookstore.app.service.AuthorService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class AuthorServiceImpl implements AuthorService {

    AuthorRepository authorRepository;
    private ModelMapper modelMapper;

    public List<AuthorResponse> getAll() {
        return authorRepository.findAll()
                .stream()
                .map(author -> modelMapper.map(author, AuthorResponse.class))
                .toList();
    }

    @Override
    public AuthorResponse getAuthorById(Long id) {
        return modelMapper.map(
                authorRepository.findById(id)
                        .orElseThrow(
                                () -> new ResourceNotFoundException("Author not found with id: " + id)
                        ),
                AuthorResponse.class
        );
    }

    @Override
    public AuthorResponse createAuthor(AuthorRequest authorRequest) {
        if(authorRepository.findByName(authorRequest.getName()).isPresent())
            throw new ResourceAlreadyExistsException("Author already exists");

        Author savedAuthor = authorRepository.save(modelMapper.map(authorRequest, Author.class));
        return modelMapper.map(savedAuthor, AuthorResponse.class);
    }

    @Override
    public AuthorResponse updateAuthor(Long id, AuthorRequest authorRequest) {
        Author existingAuthor = authorRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Author not found"));
        existingAuthor.setName(authorRequest.getName());
        return modelMapper.map(existingAuthor, AuthorResponse.class);
    }

    @Override
    public void deleteAuthorById(Long id) {
        authorRepository.findById(id)
                .ifPresentOrElse(author -> authorRepository.deleteById(id),
                        () -> {
                    throw new ResourceNotFoundException("Author not found");
                        });
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/AuthServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.request.LoginRequest;
import com.bookstore.app.dto.request.ResetPasswordRequest;
import com.bookstore.app.dto.response.JwtTokenResponse;
import com.bookstore.app.dto.response.UserProfileResponse;
import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.entity.PasswordResetToken;
import com.bookstore.app.entity.User;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.PasswordResetTokenRepository;
import com.bookstore.app.repository.UserRepository;
import com.bookstore.app.security.CustomerUserDetails;
import com.bookstore.app.security.JwtAuthenticationProvider;
import com.bookstore.app.service.AuthService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class AuthServiceImpl implements AuthService {

    AuthenticationManager authenticationManager;
    JwtAuthenticationProvider jwtAuthenticationProvider;
    PasswordEncoder passwordEncoder;
    ModelMapper modelMapper;
    UserRepository userRepository;
    private final PasswordResetTokenRepository passwordResetTokenRepository;

    @Override
    public JwtTokenResponse login(LoginRequest loginRequest) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword())
        );
        CustomerUserDetails userDetails = (CustomerUserDetails) authentication.getPrincipal();
        return JwtTokenResponse.builder()
                .accessToken(jwtAuthenticationProvider.generateAccessToken(userDetails))
                .accessTokenExpiration(jwtAuthenticationProvider.getJwtAccessTokenExpiration())
                .refreshToken(jwtAuthenticationProvider.generateRefreshToken(userDetails))
                .refreshTokenExpiration(jwtAuthenticationProvider.getJwtRefreshTokenExpiration())
                .user(modelMapper.map(userDetails.getUser(), UserResponse.class))
                .build();
    }

    @Override
    public UserResponse resetPassword(String email) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User with email: " + email + " not found"));
        passwordResetTokenRepository.findByUser(user)
                .ifPresent(passwordResetTokenRepository::delete);
        return modelMapper.map(user, UserResponse.class);
    }

    @Override
    public Long confirmResetPassword(String token) {
        PasswordResetToken passwordResetToken = passwordResetTokenRepository.findByToken(token)
                .orElseThrow(() -> new ResourceNotFoundException("Invalid token"));
        if(passwordResetToken.getExpiryDate().isBefore(LocalDateTime.now()))
            throw new ResourceAlreadyExistsException("Token has expired");
        User user = passwordResetToken.getUser();
        return user.getUserId();
    }

    @Override
    public UserResponse changPassword(ResetPasswordRequest resetPasswordRequest) {
        PasswordResetToken passwordResetToken = passwordResetTokenRepository.findByToken(resetPasswordRequest.getToken())
                        .orElseThrow(() -> new ResourceNotFoundException("Invalid token"));
        User user = passwordResetToken.getUser();
        if(!user.getUserId().equals(resetPasswordRequest.getUserId()))
            throw new IllegalStateException("Invalid user with token");
        user.setPassword(passwordEncoder.encode(resetPasswordRequest.getNewPassword()));
        return modelMapper.map(userRepository.save(user), UserResponse.class);
    }

    @Override
    public UserProfileResponse getMe() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        CustomerUserDetails userDetails = (CustomerUserDetails) authentication.getPrincipal();
        User user = userDetails.getUser();
        return modelMapper.map(user, UserProfileResponse.class);
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/BookDocumentServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.elasticsearch.BookDocument;
import com.bookstore.app.elasticsearch.BookDocumentRepository;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.BookRepository;
import com.bookstore.app.service.BookDocumentService;
import com.bookstore.app.utils.BookMapper;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.StreamSupport;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class BookDocumentServiceImpl implements BookDocumentService {

    BookRepository bookRepository;
    BookDocumentRepository bookDocumentRepository;

    @Override
    public List<BookDocument> getAll() {
        return StreamSupport.stream(bookDocumentRepository.findAll().spliterator(), false)
                .toList();
    }

    @Override
    public BookDocument getBookDocumentById(String id) {
        return bookDocumentRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException(
                        String.format("Book document with id %s not found", id)
                ));
    }

    @Override
    public BookDocument addBookDocument(BookDocument bookDocument) {
        List<BookDocument> bookDocuments = bookDocumentRepository.findByTitle(bookDocument.getTitle());
        if (!bookDocuments.isEmpty())
            throw new ResourceAlreadyExistsException(
                    String.format("Book document with title %s already exists", bookDocument.getTitle())
            );
        return bookDocumentRepository.save(bookDocument);
    }

    @Override
    public BookDocument updateBookDocument(String id, BookDocument bookDocument) {
        BookDocument existingBookDocument = bookDocumentRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException(
                        String.format("Book document with id %s not found", id)
                ));
        bookDocument.setBookId(existingBookDocument.getBookId());
        return bookDocumentRepository.save(bookDocument);
    }

    @Override
    public void deleteBookDocumentById(String id) {
        BookDocument bookDocument = bookDocumentRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException(
                        String.format("Book document with id %s not found", id)
                ));
        bookDocumentRepository.delete(bookDocument);
    }

    @Override
    public List<BookDocument> saveAll() {
        List<BookDocument> books = bookRepository.findAll()
                .stream()
                .map(BookMapper::convertToBookDocument)
                .toList();
        return StreamSupport.stream(bookDocumentRepository.saveAll(books).spliterator(), false)
                .toList();
    }

    @Override
    public void deleteAll() {
        bookDocumentRepository.deleteAll();
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/BookServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.request.BookRequest;
import com.bookstore.app.dto.response.BookResponse;
import com.bookstore.app.dto.response.PageResponse;
import com.bookstore.app.entity.Author;
import com.bookstore.app.entity.Book;
import com.bookstore.app.entity.Category;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.AuthorRepository;
import com.bookstore.app.repository.BookRepository;
import com.bookstore.app.repository.CategoryRepository;
import com.bookstore.app.service.BookService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class BookServiceImpl implements BookService {

    BookRepository bookRepository;
    AuthorRepository authorRepository;
    CategoryRepository categoryRepository;
    ModelMapper modelMapper;

    @Cacheable(value = "books", key = "'all'")
    @Override
    public List<BookResponse> getAll() {
        return bookRepository.findAll()
                .stream()
                .map(book -> modelMapper.map(book, BookResponse.class))
                .collect(Collectors.toCollection(ArrayList::new));
    }

    @Cacheable(value = "books", key = "T(String).format('pagination::page=%d::limit=%d', #page, #limit)")
    @Override
    public PageResponse<BookResponse> getBooksPagination(int page, int limit) {
        Pageable pageable = PageRequest.of(page, limit);
        Page<BookResponse> responses = bookRepository.findAll(pageable)
                .map(book -> modelMapper.map(book, BookResponse.class));
        return PageResponse.<BookResponse>builder()
                .content(responses.getContent())
                .number(responses.getNumber())
                .size(responses.getSize())
                .totalElements(responses.getTotalElements())
                .totalPages(responses.getTotalPages())
                .numberOfElements(responses.getNumberOfElements())
                .first(responses.isFirst())
                .last(responses.isLast())
                .empty(responses.isEmpty())
                .build();
    }

    @Override
    public BookResponse getBookById(Long id) {
        return modelMapper.map(
                bookRepository.findById(id)
                        .orElseThrow(
                                () ->  new ResourceNotFoundException("Book not found with id: " + id)
                        ),
                BookResponse.class
        );
    }

    @Override
    public BookResponse getBookByTitle(String title) {
        return modelMapper.map(
                bookRepository.findByTitle(title).orElseThrow(
                        () -> new ResourceNotFoundException("Book not found with title: " + title)
                ),
                BookResponse.class
        );
    }

    @Override
    public List<BookResponse> getBooksFeatured() {
        return bookRepository.findAll()
                .stream()
                .map(book -> modelMapper.map(book, BookResponse.class))
                .toList();
    }

    @Override
    public BookResponse createBook(BookRequest bookRequest) {
        if(bookRepository.findByTitle(bookRequest.getTitle()).isPresent())
            throw new ResourceAlreadyExistsException("Book already exists with title: " + bookRequest.getTitle());
        Book savedBook = new Book();
        setBook(savedBook, bookRequest);
        return modelMapper.map(bookRepository.save(savedBook), BookResponse.class);
    }

    @Override
    public BookResponse updateBook(Long id, BookRequest bookRequest) {
        Book existingBook = bookRepository.findById(id).orElseThrow(
                () -> new ResourceNotFoundException("Book not found with id: " + id)
        );
        setBook(existingBook, bookRequest);
        return modelMapper.map(bookRepository.save(existingBook), BookResponse.class);
    }

    @Override
    public void deleteBook(Long id) {
        bookRepository.findById(id)
                .ifPresentOrElse(
                        book -> bookRepository.deleteById(id),
                        () -> {
                            throw new ResourceNotFoundException("Book not found with id: " + id);
                        }
                );
    }

    @Override
    public List<BookResponse> getAllByAuthorId(Long authorId) {
        return List.of();
    }

    @Cacheable(value = "books", key = "'category::' + #categoryId")
    @Override
    public List<BookResponse> getBooksByCategoryId(Long categoryId) {
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new ResourceNotFoundException("Category not found with id: " + categoryId));
        return bookRepository.findByCategories(Set.of(category))
                .stream()
                .map(book -> modelMapper.map(book, BookResponse.class))
                .collect(Collectors.toCollection(ArrayList::new));
    }

    @Cacheable(value = "books", key = "'featured::category::' + #categoryId")
    @Override
    public List<BookResponse> getBooksFeaturedByCategoryId(Long categoryId, int page, int limit) {
        Pageable pageable = PageRequest.of(page, limit);
        return bookRepository.findBooksFeaturedByCategory(categoryId, pageable)
                .stream()
                .map(book -> modelMapper.map(book, BookResponse.class))
                .collect(Collectors.toCollection(ArrayList::new));
    }

    @Override
    public List<BookResponse> searchByTitle(String title) {
        return List.of();
    }

    private void setBook(Book book, BookRequest bookRequest) {
        Set<Author> authorsSet = new HashSet<>(authorRepository.findAllById(bookRequest.getAuthorsId()));
        Set<Category> categoriesSet = new HashSet<>(categoryRepository.findAllById(bookRequest.getCategoriesId()));
        book.setTitle(bookRequest.getTitle());
        book.setDescription(bookRequest.getDescription());
        book.setIsbn(bookRequest.getIsbn());
        book.setSmallImageUrl(bookRequest.getSmallImageUrl());
        book.setMediumImageUrl(bookRequest.getMediumImageUrl());
        book.setLargeImageUrl(bookRequest.getLargeImageUrl());
        book.setPrice(bookRequest.getPrice());
        book.setPublishedDate(bookRequest.getPublishedDate());
        book.setAuthors(authorsSet);
        book.setCategories(categoriesSet);
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/CacheServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.service.CacheService;
import lombok.AllArgsConstructor;
import org.springframework.cache.CacheManager;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
@AllArgsConstructor
public class CacheServiceImpl implements CacheService {

    private CacheManager cacheManager;
    private RedisTemplate<String, Object> redisTemplate;

    @Override
    public void getAllCache() {
        ArrayList<UserResponse> userResponses = (ArrayList<UserResponse>) redisTemplate.opsForValue().get("users::all");
        if (userResponses != null) userResponses.forEach(System.out::println);
    }

    @Override
    public Object getCache(String value, Object key) {
        Object object = redisTemplate.opsForValue().get(value + "::" + key);
        System.out.println(object);
        return object;
    }

    @Override
    public String getTypeCache() {
        return cacheManager.getClass().getName();
    }

    @Override
    public void printCacheStats() {
//        CaffeineCache caffeineCache = (CaffeineCache) cacheManager.getCache("users");
//        System.out.println(caffeineCache.getNativeCache().stats());
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/CartServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.service.CartService;
import com.bookstore.app.utils.CartItems;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.Random;
import java.util.concurrent.TimeUnit;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class CartServiceImpl implements CartService {

    RedisTemplate<String, Object> redisTemplate;
    static String CART_KEY_PREFIX = "cart::";
    static Long CART_EXPIRE_TIME = 60 * 60 *  24L;
    Random random = new Random();

    private String generateCartId() {
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < 8; i++) {
            int index = random.nextInt(chars.length());
            sb.append(chars.charAt(index));
        }
        return sb.toString();
    }

    private void save(String cartId, CartItems cartItems) {
        redisTemplate.opsForValue().set(cartId, cartItems);
        redisTemplate.expire(cartId, CART_EXPIRE_TIME, TimeUnit.SECONDS);
    }

    @Override
    public CartItems getItems(String cartId) {
        return  (CartItems) redisTemplate.opsForValue().get(cartId);
    }

    @Override
    public String addItems(String cartId, String bookId, int quantity) {
        CartItems cartItems = null;
        if(cartId == null || cartId.isEmpty()) cartId = CART_KEY_PREFIX + generateCartId();
        else cartItems = (CartItems) redisTemplate.opsForValue().get(cartId);
        cartItems = (cartItems != null) ? cartItems : new CartItems();
        cartItems.addItem(bookId, quantity);
        save(cartId, cartItems);
        return cartId;
    }

    @Override
    public void minusItems(String cartId, String bookId, int quantity) {
        CartItems cartItems = (CartItems) redisTemplate.opsForValue().get(cartId);
        if (cartItems != null) {
            cartItems.minusItem(bookId, quantity);
            save(cartId, cartItems);
        }
    }

    @Override
    public void removeItem(String cartId, String bookId) {
        CartItems cartItems = (CartItems) redisTemplate.opsForValue().get(cartId);
        if (cartItems != null) {
            cartItems.removeItem(bookId);
            save(cartId, cartItems);
        }
    }

    @Override
    public int getTotalItems(String cartId) {
        CartItems cartItems = (CartItems) redisTemplate.opsForValue().get(cartId);
        if (cartItems != null) {
            return cartItems.getTotalItems();
        }
        return 0;
    }

    @Override
    public int getTotalQuantities(String cartId) {
        CartItems cartItems = (CartItems) redisTemplate.opsForValue().get(cartId);
        if (cartItems != null) {
            return cartItems.getTotalQuantities();
        }
        return 0;
    }

    @Override
    public void clearItems(String cartId) {
        CartItems cartItems = (CartItems) redisTemplate.opsForValue().get(cartId);
        if (cartItems != null) {
            cartItems.clearItems();
            save(cartId, cartItems);
        }
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/CategoryServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.request.CategoryRequest;
import com.bookstore.app.dto.response.CategoryResponse;
import com.bookstore.app.entity.Category;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.CategoryRepository;
import com.bookstore.app.service.CategoryService;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = lombok.AccessLevel.PRIVATE, makeFinal = true)
public class CategoryServiceImpl implements CategoryService {
    CategoryRepository categoryRepository;
    ModelMapper modelMapper;

    @Cacheable(value = "categories", key = "'all'")
    @Override
    public List<CategoryResponse> getAll() {
        return categoryRepository.findAll()
                .stream()
                .map(category -> modelMapper.map(category, CategoryResponse.class))
                .collect(Collectors.toCollection(ArrayList::new));
    }

    @Override
    public CategoryResponse getCategoryById(Long id) {
        return categoryRepository.findById(id)
                .map(category -> modelMapper.map(category, CategoryResponse.class))
                .orElseThrow(() -> new ResourceNotFoundException("Category not found"));
    }

    @Cacheable(value = "categories", key = "'featured'")
    @Override
    public List<CategoryResponse> getCategoriesFeatured() {
        return categoryRepository.findCategoriesFeatured()
                .stream()
                .map(category -> modelMapper.map(category, CategoryResponse.class))
                .collect(Collectors.toCollection(ArrayList::new));
    }

    @Override
    public CategoryResponse createCategory(CategoryRequest categoryRequest) {
        categoryRepository.findByName(categoryRequest.getName())
                .ifPresent(category ->{
                    throw new ResourceAlreadyExistsException("Category already exists");
                });
        Category savedCategory = categoryRepository.save(modelMapper.map(categoryRequest, Category.class));
        return modelMapper.map(savedCategory, CategoryResponse.class);
    }

    @Override
    public CategoryResponse updateCategory(Long id, CategoryRequest categoryRequest) {
        Category existingCategory = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Category not found"));
        existingCategory.setName(categoryRequest.getName());
        return modelMapper.map(categoryRepository.save(existingCategory), CategoryResponse.class);
    }

    @Override
    public void deleteCategoryById(Long id) {
        categoryRepository.findById(id)
                .ifPresentOrElse(category -> categoryRepository.deleteById(id),
                        () -> {
                    throw new ResourceNotFoundException("Category not found");
                        });
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/CloudinaryServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.service.CloudinaryService;
import com.cloudinary.Cloudinary;
import com.cloudinary.api.ApiResponse;
import com.cloudinary.utils.ObjectUtils;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.List;
import java.util.Map;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class CloudinaryServiceImpl implements CloudinaryService {

    Cloudinary cloudinary;

    @Override
    public ApiResponse get(String public_id) {
        try {
            return cloudinary.api().resource(public_id, ObjectUtils.emptyMap());
        } catch (Exception e) {
            log.error("Error fetching image from Cloudinary: {}", e.getMessage());
            throw new RuntimeException("Error fetching image from Cloudinary: " + e.getMessage());
        }
    }

    @Async
    @Override
    public void upload(MultipartFile file) {
        File tempFile = null;
        try {
            String originalFileNames = file.getOriginalFilename();
            if (originalFileNames == null)
                throw new IllegalArgumentException("File name cannot be empty");
            String public_id = originalFileNames.replaceAll("\\s+", "_").replaceAll("\\.\\w+$", "");
            tempFile = File.createTempFile("upload_", public_id);
            file.transferTo(tempFile);
            Map params = ObjectUtils.asMap(
                    "public_id", public_id,
                    "use_filename", true,
                    "unique_filename", false,
                    "overwrite", true
            );
            Map result = cloudinary.uploader().upload(tempFile, params);
            log.info(result.toString());
        } catch (Exception e) {
            log.info("Error uploading image to Cloudinary: {}", e.getMessage());
            throw new RuntimeException("Error creating temporary file: " + e.getMessage());
        }
//        finally {
//            if (tempFile != null && tempFile.isFile()) tempFile.delete();
//        }
    }

    @Override
    public void delete(String public_id) {
        try {
            System.out.println(cloudinary.api().deleteResources(List.of(public_id), ObjectUtils.emptyMap()));
        } catch (Exception e) {
            log.error("Error deleting image from Cloudinary: {}", e.getMessage());
            throw new RuntimeException("Error deleting image from Cloudinary: " + e.getMessage());
        }
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/MailServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.service.MailService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.util.concurrent.CompletableFuture;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class MailServiceImpl implements MailService {

    MailSender mailSender;

    @Override
    @Async
    public void sendEmail(String to, String subject, String text) {
        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
        simpleMailMessage.setTo(to);
        simpleMailMessage.setSubject(subject);
        simpleMailMessage.setText(text);
        CompletableFuture.runAsync(() -> mailSender.send(simpleMailMessage));
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/NotificationServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.response.NotificationMessage;
import com.bookstore.app.service.NotificationService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class NotificationServiceImpl implements NotificationService {

    SimpMessagingTemplate simpMessagingTemplate;

    @Override
    public void sendNotification(String message) {
        NotificationMessage notificationMessage = NotificationMessage.builder()
                        .message(message)
                                .build();
        simpMessagingTemplate.convertAndSend("/topic/notifications", notificationMessage);
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/OrderDetailServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.response.OrderDetailResponse;
import com.bookstore.app.repository.OrderDetailRepository;
import com.bookstore.app.service.OrderDetailService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class OrderDetailServiceImpl implements OrderDetailService {
    OrderDetailRepository orderDetailRepository;
    ModelMapper modelMapper;

    @Override
    public List<OrderDetailResponse> getAll() {
        return orderDetailRepository.findAll()
                .stream()
                .map(orderDetail -> modelMapper.map(orderDetail, OrderDetailResponse.class))
                .toList();
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/OrderServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.dto.response.OrderResponse;
import com.bookstore.app.repository.OrderRepository;
import com.bookstore.app.service.OrderService;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.List;

import static lombok.AccessLevel.PRIVATE;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = PRIVATE, makeFinal = true)
public class OrderServiceImpl implements OrderService {

    OrderRepository orderRepository;
    ModelMapper modelMapper;

    @Override
    public List<OrderResponse> getAll() {
        return orderRepository.findAll()
                .stream()
                .map(order -> modelMapper.map(order, OrderResponse.class))
                .toList();
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/PasswordResetTokenServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.entity.PasswordResetToken;
import com.bookstore.app.entity.User;
import com.bookstore.app.repository.PasswordResetTokenRepository;
import com.bookstore.app.service.PasswordResetTokenService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class PasswordResetTokenServiceImpl implements PasswordResetTokenService {

    PasswordResetTokenRepository passwordResetTokenRepository;

    @Override
    public PasswordResetToken createToken(User user, String token) {
        return passwordResetTokenRepository.save(
                PasswordResetToken.builder()
                        .user(user)
                        .token(token)
                        .expiryDate(LocalDateTime.now().plusHours(1))
                        .build()
        );
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/RegistrationServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RegisterRequest;
import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.entity.User;
import com.bookstore.app.entity.VerificationToken;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.exception.TokenExpiredException;
import com.bookstore.app.repository.UserRepository;
import com.bookstore.app.repository.VerificationTokenRepository;
import com.bookstore.app.service.RegistrationService;
import com.bookstore.app.service.UserService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class RegistrationServiceImpl implements RegistrationService {

    UserRepository userRepository;
    UserService userService;
    VerificationTokenRepository verificationTokenRepository;
    ModelMapper modelMapper;

    @Override
    public UserResponse register(RegisterRequest registerRequest, RoleType roleType) {
        if(userRepository.findByEmail(registerRequest.getEmail()).isPresent())
            throw new ResourceAlreadyExistsException("User with email " + registerRequest.getEmail() + " already exists");
        return userService.createUserWithRole(registerRequest, roleType);
    }

    @Override
    public UserResponse confirmRegistration(String token) {
        VerificationToken verificationToken = verificationTokenRepository.findByToken(token)
                .orElseThrow(() -> new ResourceNotFoundException("Verification token not found"));
        if(verificationToken.getExpiryDate().isBefore(LocalDateTime.now()))
            throw new TokenExpiredException("Verification token has expired");
        User user = verificationToken.getUser();
        if(user.isActive())
            throw new IllegalStateException("User with email " + user.getEmail() + " is already active");
        user.setActive(true);
        return modelMapper.map(userRepository.save(user), UserResponse.class);
    }

    @Override
    public UserResponse resendEmail(String email) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User with email " + email + " not found"));
        if(user.isActive())
            throw new IllegalStateException("User with email " + email + " is already active");
        verificationTokenRepository.findByUser(user).ifPresent(verificationTokenRepository::delete);
        return modelMapper.map(user, UserResponse.class);
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/RoleServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RoleRequest;
import com.bookstore.app.dto.response.RoleResponse;
import com.bookstore.app.entity.Role;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.RoleRepository;
import com.bookstore.app.service.RoleService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class RoleServiceImpl implements RoleService {
    RoleRepository roleRepository;
    ModelMapper modelMapper;

    @Override
    public List<RoleResponse> getAll() {
        return roleRepository.findAll()
                .stream()
                .map(role -> modelMapper.map(role, RoleResponse.class))
                .toList();
    }

    @Override
    public RoleResponse getRoleById(Long id) {
        return roleRepository.findById(id)
                .map(role -> modelMapper.map(role, RoleResponse.class))
                .orElseThrow(
                        () -> new ResourceNotFoundException("Role not found")
                );
    }

    @Override
    public RoleResponse getRoleByName(RoleType name) {
        return roleRepository.findByName(name)
                .map(role -> modelMapper.map(role, RoleResponse.class))
                .orElseThrow(() -> new ResourceNotFoundException("Role not found"));
    }

//    @Override
//    public RoleResponse createRole(RoleRequest roleRequest) {
//        roleRepository.findByName(roleRequest.getName())
//                .ifPresent(
//                        role -> {
//                            throw new ResourceAlreadyExistsException("Role already exists");
//                        }
//                );
//        Role savedRole = modelMapper.map(roleRequest, Role.class);
//        return modelMapper.map(roleRepository.save(savedRole), RoleResponse.class);
//    }

    @Override
    public RoleResponse updateRole(Long id, RoleRequest roleRequest) {
        Role existingRole = roleRepository.findById(id).
                orElseThrow(() -> new ResourceNotFoundException("Role not found"));
        existingRole.setName(roleRequest.getName());
        return modelMapper.map(roleRepository.save(existingRole), RoleResponse.class);
    }

    @Override
    public void deleteRoleById(Long id) {
        roleRepository.findById(id)
                .ifPresentOrElse(
                        (role) -> roleRepository.deleteById(id),
                        () -> {
                            throw new ResourceNotFoundException("Role not found");
                        }
                );
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/SearchServiceImpl.java
================
package com.bookstore.app.service.impl;

import co.elastic.clients.json.JsonData;
import com.bookstore.app.elasticsearch.BookDocument;
import com.bookstore.app.service.SearchService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.elasticsearch.client.elc.NativeQuery;
import org.springframework.data.elasticsearch.core.*;
import org.springframework.stereotype.Service;


@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class SearchServiceImpl implements SearchService {

    ElasticsearchOperations elasticsearchOperations;

    private Page<BookDocument> getResults(NativeQuery query) {
        SearchHits<BookDocument> searchHits = elasticsearchOperations.search(query, BookDocument.class);
        SearchPage<BookDocument> searchPage = SearchHitSupport.searchPageFor(searchHits, query.getPageable());
        return searchPage.map(SearchHit::getContent);
    }

    public Page<BookDocument> search(String title,
                                     String author,
                                     String category,
                                     int pageNumber,
                                     int pageSize,
                                     String order) {
        Sort sort = order.equalsIgnoreCase("asc") ?
                Sort.by(Sort.Direction.ASC, "price") :
                order.equalsIgnoreCase("desc") ?
                Sort.by(Sort.Direction.DESC, "price") :
                Sort.unsorted();
        Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);

        boolean hasTitle = !title.isEmpty();
        boolean hasAuthor = !author.isEmpty();
        boolean hasCategory = !category.isEmpty();

        if (hasTitle && hasAuthor && hasCategory) {
            return searchBooksByTitleAndAuthorAndCategory(title, author, category, pageable);
        } else if (hasTitle && hasAuthor) {
            return searchBooksByTitleAndAuthor(title, author, pageable);
        } else if (hasTitle && hasCategory) {
            return searchBooksByTitleAndCategory(title, category, pageable);
        } else if (hasAuthor && hasCategory) {
            return searchBooksByAuthorAndCategory(author, category, pageable);
        } else if (hasTitle) {
            return searchBooksByTitle(title, pageable);
        } else if (hasAuthor) {
            return filterBooksByAuthor(author, pageable);
        } else if (hasCategory) {
            return filterBooksByCategory(category, pageable);
        } else {
            return Page.empty();
        }
    }

    @Override
    public Page<BookDocument> searchBooksByTitle(String title, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .match(m -> m.field("title").query(title))
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> searchBooksByTitleAndAuthor(String title, String author, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .bool(b -> b
                                .must(ms -> ms.match(m -> m.field("title").query(title)))
                                .must(ms -> ms.term(t -> t.field("authors").value(author)))
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> searchBooksByTitleAndCategory(String title, String category, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .bool(b -> b
                                .must(ms -> ms.match(m -> m.field("title").query(title)))
                                .must(ms -> ms.term(t -> t.field("categories").value(category)))
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> searchBooksByAuthorAndCategory(String author, String category, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .bool(b -> b
                                .must(ms -> ms.term(t -> t.field("authors").value(author)))
                                .must(ms -> ms.term(t -> t.field("categories").value(category)))
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> searchBooksByTitleAndAuthorAndCategory(String title, String author, String category, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .bool(b -> b
                                .must(ms -> ms.match(m -> m.field("title").query(title)))
                                .must(ms -> ms.term(t -> t.field("authors").value(author)))
                                .must(ms -> ms.term(t -> t.field("categories").value(category)))
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> filterBooksByAuthor(String author, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .bool(b -> b
                                .filter(f -> f
                                        .term(t -> t.field("authors").value(author))
                                )
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> filterBooksByCategory(String category, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .bool(b -> b
                                .filter(f -> f
                                        .term(t -> t.field("categories").value(category))
                                )
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }

    @Override
    public Page<BookDocument> rangeBooksByPrice(double lte, double gte, Pageable pageable) {
        NativeQuery query = NativeQuery.builder()
                .withQuery(q -> q
                        .range(r -> r
                                .field("price")
                                .lte(JsonData.of(lte))
                                .gte(JsonData.of(gte))
                        )
                )
                .withPageable(pageable)
                .build();
        return getResults(query);
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/UserServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RegisterRequest;
import com.bookstore.app.dto.response.UserProfileResponse;
import com.bookstore.app.dto.response.UserResponse;
import com.bookstore.app.entity.User;
import com.bookstore.app.exception.ResourceAlreadyExistsException;
import com.bookstore.app.exception.ResourceNotFoundException;
import com.bookstore.app.repository.RoleRepository;
import com.bookstore.app.repository.UserRepository;
import com.bookstore.app.security.CustomerUserDetails;
import com.bookstore.app.service.UserService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.modelmapper.ModelMapper;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class UserServiceImpl implements UserService {

    UserRepository userRepository;
    RoleRepository roleRepository;
    ModelMapper modelMapper;
    PasswordEncoder passwordEncoder;

    @Cacheable(value = "users", key = "'all'")
    @Override
    public List<UserResponse> getAll() {
        return userRepository.findAll()
                .stream()
                .map(user -> modelMapper.map(user, UserResponse.class))
                .collect(Collectors.toCollection(ArrayList::new));
    }

    @Cacheable(value = "users", key = "#id")
    @Override
    public UserResponse getUserById(Long id) {
        return modelMapper.map(
                userRepository.findById(id)
                        .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + id)),
                UserResponse.class
        );
    }

    @Override
    public UserResponse getUserByEmail(String email) {
        return modelMapper.map(
                userRepository.findByEmail(email)
                        .orElseThrow(() -> new ResourceNotFoundException("User not found with email: " + email)),
                UserResponse.class
        );
    }

    @CacheEvict(value = "users", key = "'all'")
    @Override
    public UserResponse createUserWithRole(RegisterRequest registerRequest, RoleType roleType) {
        registerRequest.setPassword(passwordEncoder.encode(registerRequest.getPassword()));
        return modelMapper.map(userRepository.save(setUser(registerRequest, roleType)), UserResponse.class);
    }

    @CachePut(value = "users", key = "#id")
    @Override
    public UserResponse updateUser(Long id, RegisterRequest registerRequest) {
        User userById = userRepository.findById(id).orElseThrow(
                () -> new ResourceNotFoundException("User not found with id: " + id)
        );
        User userByEmail = userRepository.findByEmail(registerRequest.getEmail()).orElse(null);
        if(userByEmail != null && !Objects.equals(userById.getUserId(), userByEmail.getUserId()))
            throw new ResourceAlreadyExistsException("User already exists with email: " + registerRequest.getEmail());

        userById.setEmail(registerRequest.getEmail());
        userById.setFullName(registerRequest.getFullName());
        userById.setPassword(registerRequest.getPassword());
        userById.setPhone(userById.getPhone());
        userById.setAddress(userById.getAddress());

        return modelMapper.map(userById, UserResponse.class);
    }

    @CacheEvict(value = "users", key = "#id")
    @Override
    public void deleteUser(Long id) {
        userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + id));
        userRepository.deleteById(id);
    }

    private User setUser(RegisterRequest registerRequest, RoleType roleType) {
        if(userRepository.findByEmail(registerRequest.getEmail()).isPresent())
            throw new ResourceAlreadyExistsException("User already exists with email: " + registerRequest.getEmail());
        User savedUser = modelMapper.map(registerRequest, User.class);
        savedUser.setRoles(
                Set.of(
                        roleRepository.findByName(roleType)
                                .orElseThrow(
                                        () -> new ResourceNotFoundException("Role not found with name: " + roleType.name())
                                )
                )
        );
        return savedUser;
    }
}

================
File: src/main/java/com/bookstore/app/service/impl/VerificationTokenServiceImpl.java
================
package com.bookstore.app.service.impl;

import com.bookstore.app.entity.User;
import com.bookstore.app.entity.VerificationToken;
import com.bookstore.app.repository.VerificationTokenRepository;
import com.bookstore.app.service.VerificationTokenService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class VerificationTokenServiceImpl implements VerificationTokenService {

    VerificationTokenRepository verificationTokenRepository;

    @Override
    public VerificationToken createToken(User user, String token) {
        VerificationToken verificationToken = new VerificationToken();
        verificationToken.setToken(token);
        verificationToken.setUser(user);
        verificationToken.setExpiryDate(LocalDateTime.now().plusMinutes(1));
        System.out.println(user);
        return verificationTokenRepository.save(verificationToken);
    }
}

================
File: src/main/java/com/bookstore/app/service/MailService.java
================
package com.bookstore.app.service;

public interface MailService {
    void sendEmail(String to, String subject, String text);
}

================
File: src/main/java/com/bookstore/app/service/NotificationService.java
================
package com.bookstore.app.service;

public interface NotificationService {
    void sendNotification(String message);
}

================
File: src/main/java/com/bookstore/app/service/OrderDetailService.java
================
package com.bookstore.app.service;

import com.bookstore.app.dto.response.OrderDetailResponse;

import java.util.List;

public interface OrderDetailService {
    List<OrderDetailResponse> getAll();
}

================
File: src/main/java/com/bookstore/app/service/OrderService.java
================
package com.bookstore.app.service;

import com.bookstore.app.dto.response.OrderResponse;

import java.util.List;

public interface OrderService {
    List<OrderResponse> getAll();
}

================
File: src/main/java/com/bookstore/app/service/PasswordResetTokenService.java
================
package com.bookstore.app.service;

import com.bookstore.app.entity.PasswordResetToken;
import com.bookstore.app.entity.User;

public interface PasswordResetTokenService {
    PasswordResetToken createToken(User user, String token);
}

================
File: src/main/java/com/bookstore/app/service/RegistrationService.java
================
package com.bookstore.app.service;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RegisterRequest;
import com.bookstore.app.dto.response.UserResponse;

public interface RegistrationService {
    UserResponse register(RegisterRequest registerRequest, RoleType roleType);
    UserResponse confirmRegistration(String token);
    UserResponse resendEmail(String email);
}

================
File: src/main/java/com/bookstore/app/service/RoleService.java
================
package com.bookstore.app.service;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RoleRequest;
import com.bookstore.app.dto.response.RoleResponse;

import java.util.List;

public interface RoleService {
    List<RoleResponse> getAll();
    RoleResponse getRoleById(Long id);
    RoleResponse getRoleByName(RoleType name);
//    RoleResponse createRole(RoleRequest roleRequest);
    RoleResponse updateRole(Long id, RoleRequest roleRequest);
    void deleteRoleById(Long id);
}

================
File: src/main/java/com/bookstore/app/service/SearchService.java
================
package com.bookstore.app.service;

import com.bookstore.app.elasticsearch.BookDocument;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

public interface SearchService {
    Page<BookDocument> search(String title,
                              String author,
                              String category,
                              int pageNumber,
                              int pageSize,
                              String order);
    Page<BookDocument> searchBooksByTitle(String title, Pageable pageable);
    Page<BookDocument> searchBooksByTitleAndAuthor(String title, String author, Pageable pageable);
    Page<BookDocument> searchBooksByTitleAndCategory(String title, String category, Pageable pageable);
    Page<BookDocument> searchBooksByAuthorAndCategory(String author, String category, Pageable pageable);
    Page<BookDocument> searchBooksByTitleAndAuthorAndCategory(String title, String author, String category, Pageable pageable);
    Page<BookDocument> filterBooksByAuthor(String author, Pageable pageable);
    Page<BookDocument> filterBooksByCategory(String category, Pageable pageable);
    Page<BookDocument> rangeBooksByPrice(double lte, double gte, Pageable pageable);
}

================
File: src/main/java/com/bookstore/app/service/UserService.java
================
package com.bookstore.app.service;

import com.bookstore.app.constant.RoleType;
import com.bookstore.app.dto.request.RegisterRequest;
import com.bookstore.app.dto.response.UserResponse;

import java.util.List;

public interface UserService {
    List<UserResponse> getAll();
    UserResponse getUserById(Long id);
    UserResponse getUserByEmail(String email);
    UserResponse createUserWithRole(RegisterRequest registerRequest, RoleType roleType);
    UserResponse updateUser(Long id, RegisterRequest registerRequest);
    void deleteUser(Long id);
}

================
File: src/main/java/com/bookstore/app/service/VerificationTokenService.java
================
package com.bookstore.app.service;

import com.bookstore.app.entity.User;
import com.bookstore.app.entity.VerificationToken;

public interface VerificationTokenService {
    VerificationToken createToken(User user, String token);
}

================
File: src/main/java/com/bookstore/app/utils/BookMapper.java
================
package com.bookstore.app.utils;

import com.bookstore.app.elasticsearch.BookDocument;
import com.bookstore.app.entity.Author;
import com.bookstore.app.entity.Book;
import com.bookstore.app.entity.Category;

public class BookMapper {
    public static BookDocument convertToBookDocument(Book book) {
        BookDocument bookDocument = new BookDocument();
        bookDocument.setBookId(book.getBookId().toString());
        bookDocument.setTitle(book.getTitle());
        bookDocument.setDescription(book.getDescription());
        bookDocument.setSmallImageUrl(book.getSmallImageUrl());
        bookDocument.setPublishedDate(book.getPublishedDate());
        bookDocument.setPrice(book.getPrice());
        bookDocument.setAuthors(book.getAuthors().stream().map(Author::getName).toList());
        bookDocument.setCategories(book.getCategories().stream().map(Category::getName).toList());
        return bookDocument;
    }
}

================
File: src/main/java/com/bookstore/app/utils/CartItems.java
================
package com.bookstore.app.utils;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.util.LinkedHashMap;
import java.util.Map;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE)
public class CartItems {
    private final Map<String, Integer> items = new LinkedHashMap<>();

    public void addItem(String bookId, int quantity) {
        if(items.containsKey(bookId)) items.put(bookId, items.get(bookId) + quantity);
        else items.put(bookId, quantity);
    }

    public void minusItem(String bookId, int quantity) {
        if(!items.containsKey(bookId)) return;
        int qty = items.get(bookId);
        if(qty <= quantity) items.remove(bookId);
        else items.put(bookId, qty - quantity);
    }

    public void removeItem(String bookId) {
        items.remove(bookId);
    }

    public Map<String, Integer> getItems() {
        return items;
    }

    public int getTotalItems() {
        return items.size();
    }

    public int getTotalQuantities() {
        return items.values().stream()
                .mapToInt(Integer::intValue)
                .sum();
    }

    public void clearItems() {
        items.clear();
    }
}

================
File: src/main/resources/application.properties
================
#spring.application.name=Book-Store-Website
#spring.config.import=optional:file:../.env[.properties],optional:file:.env[.properties]
#spring.datasource.url=${DATASOURCE_URL}
#spring.datasource.username=${DATASOURCE_USERNAME}
#spring.datasource.password=${DATASOURCE_PASSWORD}
#
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#
#logging.level.root=info
#logging.level.org.springframework=debug

================
File: src/main/resources/application.yaml
================
server:
  port: 8080

spring:
  application:
    name: Book-Store-Website
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  elasticsearch:
    uris: ${ELASTICSEARCH_URIS}
    username: ${ELASTICSEARCH_USERNAME}
    password: ${ELASTICSEARCH_PASSWORD}
logging:
  level:
    root: info
    org.springframework: debug

================
File: src/main/resources/rebel.xml
================
<?xml version="1.0" encoding="UTF-8"?>

<!--
  This is the JRebel configuration file. It maps the running application to your IDE workspace, enabling JRebel reloading for this project.
  Refer to https://manuals.jrebel.com/jrebel/standalone/config.html for more information.
-->
<application generated-by="intellij" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.zeroturnaround.com" xsi:schemaLocation="http://www.zeroturnaround.com http://update.zeroturnaround.com/jrebel/rebel-2_3.xsd">

	<id>Book-Store-Website</id>

	<classpath>
		<dir name="C:/Users/hieuc/Downloads/Book-Store-Website/target/classes">
		</dir>
	</classpath>

</application>

================
File: src/test/java/com/bookstore/app/BookStoreWebsiteApplicationTests.java
================
package com.bookstore.app;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class BookStoreWebsiteApplicationTests {

	@Test
	void contextLoads() {
	}

}
